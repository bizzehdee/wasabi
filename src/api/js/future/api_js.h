// ----------------------------------------------------------------------------
// Generated by InterfaceFactory [Wed Mar 16 17:07:53 2005]
// 
// File        : api_js.h
// Class       : api_js
// class layer : Dispatchable Interface
// ----------------------------------------------------------------------------

#ifndef __API_JS_H
#define __API_JS_H

#include "bfc/dispatch.h"




#if defined(WASABI_PLATFORM_WIN32) && !defined(XP_WIN) 
#define XP_WIN
#else 
#if defined(WASABI_PLATFORM_LINUX) && !defined(XP_UNIX) 
#define XP_UNIX
#endif
#endif
#include <jsapi.h>

// ----------------------------------------------------------------------------

class api_js: public Dispatchable {
  protected:
    api_js() {}
    ~api_js() {}
  public:
    void assignFunctions(JSContext *cx, JSObject *classobj, JSFunctionSpec *spec);
    jsval boolToJSval(JSContext *cx, bool v);
    void collectGarbage(JSContext *ctx);
    JSScript *compileScript(JSContext *cx, JSObject *obj, const char *bytes, long len, const char *filename = 0);
    JSScript *compileScript(JSContext *cx, JSObject *obj, const char *filename);
    void createNamedRoot(JSContext *cx, JSObject *scriptobject, const char *name);
    JSContext *createNewContext();
    JSObject *createNewObject(JSContext *cx, JSClass *cls, JSObject *parent = NULL);
    JSObject *createScriptObject(JSContext *cx, JSScript *script);
    int deleteContext(JSContext *ctx);
    int deleteContext(int n);
    void deleteNamedRoot(JSContext *cx, JSObject *scriptobject);
    jsval doubleToJSval(JSContext *cx, double v);
    JSContext *enumContext(int n);
    JSObject *enumObject(int n);
    bool evalScript(JSContext *cx, JSObject *obj, const char *bytes, long len, jsval *retval, const char *filename = 0);
    bool executeFunction(JSContext *cx, JSObject *script, const char *name, int argn, jsval *args, jsval *rval);
    bool executeScript(JSContext *cx, JSScript *script, jsval *rval);
    JSObject *getGlobalObject();
    JSContext *getMainContext();
    jsval intToJSval(JSContext *cx, int v);
    bool jsvalToBool(JSContext *cx, jsval *v);
    double jsvalToDouble(JSContext *cx, jsval *v);
    int jsvalToInt(JSContext *cx, jsval *v);
    void jsvalToObject(JSContext *cx, jsval *v, JSObject **obj);
    const char *jsvalToString(JSContext *cx, jsval *v);
    jsval objectToJSval(JSContext *cx, JSObject *obj);
    jsval stringToJSval(JSContext *cx, const char *v);
  
  protected:
    enum {
      API_JS_ASSIGNFUNCTIONS = 160,
      API_JS_BOOLTOJSVAL = 2530,
      API_JS_COLLECTGARBAGE = 200,
      API_JS_COMPILESCRIPT2 = 1001,
      API_JS_COMPILESCRIPT = 1000,
      API_JS_CREATENAMEDROOT = 1020,
      API_JS_CREATENEWCONTEXT = 100,
      API_JS_CREATENEWOBJECT = 140,
      API_JS_CREATESCRIPTOBJECT = 1010,
      API_JS_DELETECONTEXT2 = 130,
      API_JS_DELETECONTEXT = 120,
      API_JS_DELETENAMEDROOT = 1030,
      API_JS_DOUBLETOJSVAL = 2510,
      API_JS_ENUMCONTEXT = 110,
      API_JS_ENUMOBJECT = 150,
      API_JS_EVALSCRIPT = 1520,
      API_JS_EXECUTEFUNCTION = 1510,
      API_JS_EXECUTESCRIPT = 1500,
      API_JS_GETGLOBALOBJECT = 180,
      API_JS_GETMAINCONTEXT = 170,
      API_JS_INTTOJSVAL = 2500,
      API_JS_JSVALTOBOOL = 2030,
      API_JS_JSVALTODOUBLE = 2010,
      API_JS_JSVALTOINT = 2000,
      API_JS_JSVALTOOBJECT = 2040,
      API_JS_JSVALTOSTRING = 2020,
      API_JS_OBJECTTOJSVAL = 2540,
      API_JS_STRINGTOJSVAL = 2520,
    };
};

// ----------------------------------------------------------------------------

inline void api_js::assignFunctions(JSContext *cx, JSObject *classobj, JSFunctionSpec *spec) {
  _voidcall(API_JS_ASSIGNFUNCTIONS, cx, classobj, spec);
}

inline jsval api_js::boolToJSval(JSContext *cx, bool v) {
  jsval __retval = _call(API_JS_BOOLTOJSVAL, (jsval)NULL, cx, v);
  return __retval;
}

inline void api_js::collectGarbage(JSContext *ctx) {
  _voidcall(API_JS_COLLECTGARBAGE, ctx);
}

inline JSScript *api_js::compileScript(JSContext *cx, JSObject *obj, const char *bytes, long len, const char *filename) {
  JSScript *__retval = _call(API_JS_COMPILESCRIPT2, (JSScript *)NULL, cx, obj, bytes, len, filename);
  return __retval;
}

inline JSScript *api_js::compileScript(JSContext *cx, JSObject *obj, const char *filename) {
  JSScript *__retval = _call(API_JS_COMPILESCRIPT, (JSScript *)NULL, cx, obj, filename);
  return __retval;
}

inline void api_js::createNamedRoot(JSContext *cx, JSObject *scriptobject, const char *name) {
  _voidcall(API_JS_CREATENAMEDROOT, cx, scriptobject, name);
}

inline JSContext *api_js::createNewContext() {
  JSContext *__retval = _call(API_JS_CREATENEWCONTEXT, (JSContext *)NULL);
  return __retval;
}

inline JSObject *api_js::createNewObject(JSContext *cx, JSClass *cls, JSObject *parent) {
  JSObject *__retval = _call(API_JS_CREATENEWOBJECT, (JSObject *)NULL, cx, cls, parent);
  return __retval;
}

inline JSObject *api_js::createScriptObject(JSContext *cx, JSScript *script) {
  JSObject *__retval = _call(API_JS_CREATESCRIPTOBJECT, (JSObject *)NULL, cx, script);
  return __retval;
}

inline int api_js::deleteContext(JSContext *ctx) {
  int __retval = _call(API_JS_DELETECONTEXT2, (int)0, ctx);
  return __retval;
}

inline int api_js::deleteContext(int n) {
  int __retval = _call(API_JS_DELETECONTEXT, (int)0, n);
  return __retval;
}

inline void api_js::deleteNamedRoot(JSContext *cx, JSObject *scriptobject) {
  _voidcall(API_JS_DELETENAMEDROOT, cx, scriptobject);
}

inline jsval api_js::doubleToJSval(JSContext *cx, double v) {
  jsval __retval = _call(API_JS_DOUBLETOJSVAL, (jsval)NULL, cx, v);
  return __retval;
}

inline JSContext *api_js::enumContext(int n) {
  JSContext *__retval = _call(API_JS_ENUMCONTEXT, (JSContext *)NULL, n);
  return __retval;
}

inline JSObject *api_js::enumObject(int n) {
  JSObject *__retval = _call(API_JS_ENUMOBJECT, (JSObject *)NULL, n);
  return __retval;
}

inline bool api_js::evalScript(JSContext *cx, JSObject *obj, const char *bytes, long len, jsval *retval, const char *filename) {
  bool __retval = _call(API_JS_EVALSCRIPT, (bool)NULL, cx, obj, bytes, len, retval, filename);
  return __retval;
}

inline bool api_js::executeFunction(JSContext *cx, JSObject *script, const char *name, int argn, jsval *args, jsval *rval) {
  bool __retval = _call(API_JS_EXECUTEFUNCTION, (bool)NULL, cx, script, name, argn, args, rval);
  return __retval;
}

inline bool api_js::executeScript(JSContext *cx, JSScript *script, jsval *rval) {
  bool __retval = _call(API_JS_EXECUTESCRIPT, (bool)NULL, cx, script, rval);
  return __retval;
}

inline JSObject *api_js::getGlobalObject() {
  JSObject *__retval = _call(API_JS_GETGLOBALOBJECT, (JSObject *)NULL);
  return __retval;
}

inline JSContext *api_js::getMainContext() {
  JSContext *__retval = _call(API_JS_GETMAINCONTEXT, (JSContext *)NULL);
  return __retval;
}

inline jsval api_js::intToJSval(JSContext *cx, int v) {
  jsval __retval = _call(API_JS_INTTOJSVAL, (jsval)NULL, cx, v);
  return __retval;
}

inline bool api_js::jsvalToBool(JSContext *cx, jsval *v) {
  bool __retval = _call(API_JS_JSVALTOBOOL, (bool)NULL, cx, v);
  return __retval;
}

inline double api_js::jsvalToDouble(JSContext *cx, jsval *v) {
  double __retval = _call(API_JS_JSVALTODOUBLE, (double)0, cx, v);
  return __retval;
}

inline int api_js::jsvalToInt(JSContext *cx, jsval *v) {
  int __retval = _call(API_JS_JSVALTOINT, (int)0, cx, v);
  return __retval;
}

inline void api_js::jsvalToObject(JSContext *cx, jsval *v, JSObject **obj) {
  _voidcall(API_JS_JSVALTOOBJECT, cx, v, obj);
}

inline const char *api_js::jsvalToString(JSContext *cx, jsval *v) {
  const char *__retval = _call(API_JS_JSVALTOSTRING, (const char *)0, cx, v);
  return __retval;
}

inline jsval api_js::objectToJSval(JSContext *cx, JSObject *obj) {
  jsval __retval = _call(API_JS_OBJECTTOJSVAL, (jsval)NULL, cx, obj);
  return __retval;
}

inline jsval api_js::stringToJSval(JSContext *cx, const char *v) {
  jsval __retval = _call(API_JS_STRINGTOJSVAL, (jsval)NULL, cx, v);
  return __retval;
}

// ----------------------------------------------------------------------------


// {FF7DBA7F-480E-4e75-8A84-AD0F71D01E24}
static const GUID JSApiServiceGuid = 
{ 0xff7dba7f, 0x480e, 0x4e75, { 0x8a, 0x84, 0xad, 0xf, 0x71, 0xd0, 0x1e, 0x24 } };

extern api_js *jsApi;

#endif // __API_JS_H
