// ----------------------------------------------------------------------------
// Generated by InterfaceFactory [Wed Mar 16 17:07:53 2005]
// 
// File        : api_jsX.h
// Class       : api_js
// class layer : Dispatchable Receiver
// ----------------------------------------------------------------------------

#ifndef __API_JSX_H
#define __API_JSX_H

#include "api_js.h"




// ----------------------------------------------------------------------------

class api_jsX : public api_js {
  protected:
    api_jsX() {}
  public:
    virtual void assignFunctions(JSContext *cx, JSObject *classobj, JSFunctionSpec *spec)=0;
    virtual jsval boolToJSval(JSContext *cx, bool v)=0;
    virtual void collectGarbage(JSContext *ctx)=0;
    virtual JSScript *compileScript2(JSContext *cx, JSObject *obj, const char *bytes, long len, const char *filename = 0);
    virtual JSScript *compileScript(JSContext *cx, JSObject *obj, const char *filename)=0;
    virtual void createNamedRoot(JSContext *cx, JSObject *scriptobject, const char *name)=0;
    virtual JSContext *createNewContext()=0;
    virtual JSObject *createNewObject(JSContext *cx, JSClass *cls, JSObject *parent = NULL)=0;
    virtual JSObject *createScriptObject(JSContext *cx, JSScript *script)=0;
    virtual int deleteContext2(JSContext *ctx);
    virtual int deleteContext(int n)=0;
    virtual void deleteNamedRoot(JSContext *cx, JSObject *scriptobject)=0;
    virtual jsval doubleToJSval(JSContext *cx, double v)=0;
    virtual JSContext *enumContext(int n)=0;
    virtual JSObject *enumObject(int n)=0;
    virtual bool evalScript(JSContext *cx, JSObject *obj, const char *bytes, long len, jsval *retval, const char *filename = 0)=0;
    virtual bool executeFunction(JSContext *cx, JSObject *script, const char *name, int argn, jsval *args, jsval *rval)=0;
    virtual bool executeScript(JSContext *cx, JSScript *script, jsval *rval)=0;
    virtual JSObject *getGlobalObject()=0;
    virtual JSContext *getMainContext()=0;
    virtual jsval intToJSval(JSContext *cx, int v)=0;
    virtual bool jsvalToBool(JSContext *cx, jsval *v)=0;
    virtual double jsvalToDouble(JSContext *cx, jsval *v)=0;
    virtual int jsvalToInt(JSContext *cx, jsval *v)=0;
    virtual void jsvalToObject(JSContext *cx, jsval *v, JSObject **obj)=0;
    virtual const char *jsvalToString(JSContext *cx, jsval *v)=0;
    virtual jsval objectToJSval(JSContext *cx, JSObject *obj)=0;
    virtual jsval stringToJSval(JSContext *cx, const char *v)=0;
  
  protected:
    RECVS_DISPATCH;
};

#endif // __API_JSX_H
