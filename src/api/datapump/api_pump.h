// ----------------------------------------------------------------------------
// Generated by InterfaceFactory [Fri Oct  8 00:47:43 2004]
// 
// File        : api_pump.h
// Class       : api_pump
// class layer : Dispatchable Interface
// ----------------------------------------------------------------------------

#ifndef __API_PUMP_H
#define __API_PUMP_H

#include "bfc/dispatch.h"

class PumpHandler;
class DataSink;
class DataSource;
typedef GUID PumpClass;


// ----------------------------------------------------------------------------

class api_pump : public Dispatchable {
  protected:
    api_pump() {}
    ~api_pump() {}
  public:
    int addPumpHandler(PumpHandler *handler);
    int deregisterSink(DataSink *sink);
    int deregisterSource(DataSource *source);
    PumpHandler *getPumpHandler(PumpClass eclass);
    int pullData(GUID source, GUID puller, void *data, unsigned long sz, unsigned long *actual_sz);
    int pushData(GUID sink, GUID pusher, void *data, unsigned long sz);
    int registerSink(PumpClass eclass, DataSink *sink);
    int registerSource(PumpClass eclass, DataSource *source);
  
  protected:
    enum {
      API_PUMP_ADDPUMPHANDLER = 100,
      API_PUMP_DEREGISTERSINK = 220,
      API_PUMP_DEREGISTERSOURCE = 230,
      API_PUMP_GETPUMPHANDLER = 110,
      API_PUMP_PULLDATA = 350,
      API_PUMP_PUSHDATA = 300,
      API_PUMP_REGISTERSINK = 200,
      API_PUMP_REGISTERSOURCE = 210,
    };
};

// ----------------------------------------------------------------------------

inline int api_pump::addPumpHandler(PumpHandler *handler) {
  int __retval = _call(API_PUMP_ADDPUMPHANDLER, (int)0, handler);
  return __retval;
}

inline int api_pump::deregisterSink(DataSink *sink) {
  int __retval = _call(API_PUMP_DEREGISTERSINK, (int)0, sink);
  return __retval;
}

inline int api_pump::deregisterSource(DataSource *source) {
  int __retval = _call(API_PUMP_DEREGISTERSOURCE, (int)0, source);
  return __retval;
}

inline PumpHandler *api_pump::getPumpHandler(PumpClass eclass) {
  PumpHandler *__retval = _call(API_PUMP_GETPUMPHANDLER, (PumpHandler *)NULL, eclass);
  return __retval;
}

inline int api_pump::pullData(GUID source, GUID puller, void *data, unsigned long sz, unsigned long *actual_sz) {
  int __retval = _call(API_PUMP_PULLDATA, (int)0, source, puller, data, sz, actual_sz);
  return __retval;
}

inline int api_pump::pushData(GUID sink, GUID pusher, void *data, unsigned long sz) {
  int __retval = _call(API_PUMP_PUSHDATA, (int)0, sink, pusher, data, sz);
  return __retval;
}

inline int api_pump::registerSink(PumpClass eclass, DataSink *sink) {
  int __retval = _call(API_PUMP_REGISTERSINK, (int)0, eclass, sink);
  return __retval;
}

inline int api_pump::registerSource(PumpClass eclass, DataSource *source) {
  int __retval = _call(API_PUMP_REGISTERSOURCE, (int)0, eclass, source);
  return __retval;
}

// ----------------------------------------------------------------------------


// {0E572925-FAA0-F849-99B4-DB6A010600B9}
static const GUID pumpApiServiceGuid = 
{ 0x0e572925, 0xfaa0, 0xf849, { 0x99, 0xb4, 0xdb, 0x6a, 0x01, 0x06, 0x00, 0xb9 } };

extern api_pump *pumpApi;

#endif // __API_PUMP_H
