// ----------------------------------------------------------------------------
// Generated by JSScriptable Factory - DO NOT EDIT
// 
// File        : ../js/JSXUIEdit.cpp
// Class       : XUIEdit
// class layer : Javascript Dispatcher
// ----------------------------------------------------------------------------

#include "precomp.h"
#include "JSXUIEdit.h"
#include "..\xuiedit.h"


#pragma warning(push)
#pragma warning(disable: 4800)


JSXUIEdit::JSXUIEdit() {
  XUIEdit *pthis = (static_cast<XUIEdit *>(this));
  pthis->js_addInterface(JS_XUIEdit_GUID, pthis);
  pthis->js_addClassDescriptor(&JSXUIEdit::classDescriptor);
  pthis->js_addFunctionTable(JSXUIEdit::functionTable);
  jsSink = new JSXUIEditEventSink(this);
  jsSink->eventSink_registerTo(pthis);
}

JSXUIEdit::~JSXUIEdit() {
  delete jsSink;
}

JSClass JSXUIEdit::classDescriptor = {
  "XUIEdit", JSCLASS_HAS_PRIVATE,
  JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
  JS_EnumerateStub, JS_ResolveStub, JS_ConvertStub, JS_FinalizeStub,
  JSCLASS_NO_OPTIONAL_MEMBERS
};

JSFunctionSpec JSXUIEdit::functionTable[] = {
  {"selectAll", JSXUIEdit::fromjs_selectAll, 0, 0, 0},
  {0,0,0,0,0},
};

JSBool JSXUIEdit::fromjs_selectAll(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIEdit *object = static_cast<XUIEdit *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIEdit::classDescriptor.name, JSXUIEdit::functionTable[0].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  object->selectAll();
  // success
  return JS_TRUE;
}

// ----------------------------------------------------------------------------

void JSXUIEditEventSink::eventSink_onEdit(XUIEditEventSource *source, const char *value) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIEdit *>(m_jsClass))->js_getEventListeners("onedit");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[1];
    JSString *str0= JS_NewStringCopyZ((static_cast<XUIEdit *>(m_jsClass))->js_getCurrentContext(), value);
    p[0] = STRING_TO_JSVAL(str0);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 1, p, &rv);
  endfor
}

void JSXUIEditEventSink::eventSink_onIdleEdit(XUIEditEventSource *source, const char *value) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIEdit *>(m_jsClass))->js_getEventListeners("onidleedit");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[1];
    JSString *str0= JS_NewStringCopyZ((static_cast<XUIEdit *>(m_jsClass))->js_getCurrentContext(), value);
    p[0] = STRING_TO_JSVAL(str0);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 1, p, &rv);
  endfor
}


