// ----------------------------------------------------------------------------
// Generated by JSScriptable Factory - DO NOT EDIT
// 
// File        : ../js/JSXUIDndSession.cpp
// Class       : XUIDndSession
// class layer : Javascript Dispatcher
// ----------------------------------------------------------------------------

#include "precomp.h"
#include "JSXUIDndSession.h"
#include "..\..\xuidndsession.h"

#include "..\xuiobject.h"

#pragma warning(push)
#pragma warning(disable: 4800)


JSXUIDndSession::JSXUIDndSession() {
  XUIDndSession *pthis = (static_cast<XUIDndSession *>(this));
  pthis->js_addInterface(JS_XUIDndSession_GUID, pthis);
  pthis->js_addClassDescriptor(&JSXUIDndSession::classDescriptor);
  pthis->js_addFunctionTable(JSXUIDndSession::functionTable);
  jsSink = new JSXUIDndSessionEventSink(this);
  jsSink->eventSink_registerTo(pthis);
}

JSXUIDndSession::~JSXUIDndSession() {
  delete jsSink;
}

JSClass JSXUIDndSession::classDescriptor = {
  "XUIDndSession", JSCLASS_HAS_PRIVATE,
  JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
  JS_EnumerateStub, JS_ResolveStub, JS_ConvertStub, JS_FinalizeStub,
  JSCLASS_NO_OPTIONAL_MEMBERS
};

JSFunctionSpec JSXUIDndSession::functionTable[] = {
  {"acceptDrop", JSXUIDndSession::fromjs_acceptDrop, 0, 0, 0},
  {"dropAccepted", JSXUIDndSession::fromjs_dropAccepted, 0, 0, 0},
  {"getNumDragTypes", JSXUIDndSession::fromjs_getNumDragTypes, 0, 0, 0},
  {"enumDragType", JSXUIDndSession::fromjs_enumDragType, 1, 0, 0},
  {"getNumDragObjects", JSXUIDndSession::fromjs_getNumDragObjects, 1, 0, 0},
  {"enumDragObject", JSXUIDndSession::fromjs_enumDragObject, 2, 0, 0},
  {"hasDragType", JSXUIDndSession::fromjs_hasDragType, 1, 0, 0},
  {"getDropTarget", JSXUIDndSession::fromjs_getDropTarget, 0, 0, 0},
  {"addDragObject", JSXUIDndSession::fromjs_addDragObject, 2, 0, 0},
  {0,0,0,0,0},
};

JSBool JSXUIDndSession::fromjs_acceptDrop(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIDndSession *object = static_cast<XUIDndSession *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIDndSession::classDescriptor.name, JSXUIDndSession::functionTable[0].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  object->acceptDrop();
  // success
  return JS_TRUE;
}

JSBool JSXUIDndSession::fromjs_dropAccepted(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIDndSession *object = static_cast<XUIDndSession *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIDndSession::classDescriptor.name, JSXUIDndSession::functionTable[1].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  bool rv = object->dropAccepted();
  // handle return value
  *rval = BOOLEAN_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIDndSession::fromjs_getNumDragTypes(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIDndSession *object = static_cast<XUIDndSession *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIDndSession::classDescriptor.name, JSXUIDndSession::functionTable[2].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  int rv = object->getNumDragTypes();
  // handle return value
  *rval = INT_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIDndSession::fromjs_enumDragType(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIDndSession *object = static_cast<XUIDndSession *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIDndSession::classDescriptor.name, JSXUIDndSession::functionTable[3].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // int n
  jsint p0;
  if (!JS_ValueToInt32(cx, argv[0], &p0))
    return JS_FALSE;
  argv[0] = INT_TO_JSVAL(p0);
  // call method
  ASSERT(object != NULL);
  const char * rv = object->enumDragType(p0);
  // handle return value
  JSString *str = JS_NewStringCopyZ(cx, rv);
  *rval = STRING_TO_JSVAL(str);
  // success
  return JS_TRUE;
}

JSBool JSXUIDndSession::fromjs_getNumDragObjects(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIDndSession *object = static_cast<XUIDndSession *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIDndSession::classDescriptor.name, JSXUIDndSession::functionTable[4].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *type
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // call method
  ASSERT(object != NULL);
  int rv = object->getNumDragObjects(p0b);
  // handle return value
  *rval = INT_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIDndSession::fromjs_enumDragObject(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIDndSession *object = static_cast<XUIDndSession *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIDndSession::classDescriptor.name, JSXUIDndSession::functionTable[5].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *type
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // int n
  jsint p1;
  if (!JS_ValueToInt32(cx, argv[1], &p1))
    return JS_FALSE;
  argv[1] = INT_TO_JSVAL(p1);
  // call method
  ASSERT(object != NULL);
  JSScriptable *rv = reinterpret_cast<JSScriptable *>(object->enumDragObject(p0b, p1));
  // handle return value
  if (!rv) *rval = JSVAL_VOID;
  else *rval = OBJECT_TO_JSVAL(rv->js_getJSObject(cx));
  // success
  return JS_TRUE;
}

JSBool JSXUIDndSession::fromjs_hasDragType(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIDndSession *object = static_cast<XUIDndSession *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIDndSession::classDescriptor.name, JSXUIDndSession::functionTable[6].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *type
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // call method
  ASSERT(object != NULL);
  bool rv = object->hasDragType(p0b);
  // handle return value
  *rval = BOOLEAN_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIDndSession::fromjs_getDropTarget(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIDndSession *object = static_cast<XUIDndSession *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIDndSession::classDescriptor.name, JSXUIDndSession::functionTable[7].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  XUIObject * rv = object->getDropTarget();
  // handle return value
  if (!rv) *rval = JSVAL_VOID;
  else *rval = OBJECT_TO_JSVAL(rv->js_getJSObject(cx));
  // success
  return JS_TRUE;
}

JSBool JSXUIDndSession::fromjs_addDragObject(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIDndSession *object = static_cast<XUIDndSession *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIDndSession::classDescriptor.name, JSXUIDndSession::functionTable[8].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *dragType
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // void *dragObject
  JSObject *p1;
  if (!JS_ValueToObject(cx, argv[1], &p1))
    return JS_FALSE;
  argv[1] = OBJECT_TO_JSVAL(p1);
  void *p1o = NULL;
  if (p1) {
    p1o = static_cast<void *>(reinterpret_cast<JSScriptable*>(JS_GetPrivate(cx, p1)));
  }
  // call method
  ASSERT(object != NULL);
  object->addDragObject(p0b, p1o);
  // success
  return JS_TRUE;
}

// ----------------------------------------------------------------------------

void JSXUIDndSessionEventSink::eventSink_onDragEnter(XUIDndSessionEventSource *source, XUIObject *target) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIDndSession *>(m_jsClass))->js_getEventListeners("ondragenter");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[1];
    if (!target) p[0] = NULL;
    else p[0] = OBJECT_TO_JSVAL(target->js_getJSObject((static_cast<XUIDndSession *>(m_jsClass))->js_getCurrentContext()));
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 1, p, &rv);
  endfor
}

void JSXUIDndSessionEventSink::eventSink_onDragLeave(XUIDndSessionEventSource *source, XUIObject *target) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIDndSession *>(m_jsClass))->js_getEventListeners("ondragleave");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[1];
    if (!target) p[0] = NULL;
    else p[0] = OBJECT_TO_JSVAL(target->js_getJSObject((static_cast<XUIDndSession *>(m_jsClass))->js_getCurrentContext()));
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 1, p, &rv);
  endfor
}

void JSXUIDndSessionEventSink::eventSink_onDragOver(XUIDndSessionEventSource *source, XUIObject *target, int x, int y) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIDndSession *>(m_jsClass))->js_getEventListeners("ondragover");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[3];
    if (!target) p[0] = NULL;
    else p[0] = OBJECT_TO_JSVAL(target->js_getJSObject((static_cast<XUIDndSession *>(m_jsClass))->js_getCurrentContext()));
    jsint p1 = (jsint)x;
    p[1] = INT_TO_JSVAL(p1);
    jsint p2 = (jsint)y;
    p[2] = INT_TO_JSVAL(p2);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 3, p, &rv);
  endfor
}

void JSXUIDndSessionEventSink::eventSink_onDragDrop(XUIDndSessionEventSource *source, XUIObject *target, int x, int y) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIDndSession *>(m_jsClass))->js_getEventListeners("ondragdrop");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[3];
    if (!target) p[0] = NULL;
    else p[0] = OBJECT_TO_JSVAL(target->js_getJSObject((static_cast<XUIDndSession *>(m_jsClass))->js_getCurrentContext()));
    jsint p1 = (jsint)x;
    p[1] = INT_TO_JSVAL(p1);
    jsint p2 = (jsint)y;
    p[2] = INT_TO_JSVAL(p2);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 3, p, &rv);
  endfor
}


