// ----------------------------------------------------------------------------
// Generated by JSScriptable Factory - DO NOT EDIT
// 
// File        : ../js/JSXUIObject.cpp
// Class       : XUIObject
// class layer : Javascript Dispatcher
// ----------------------------------------------------------------------------

#include "precomp.h"
#include "JSXUIObject.h"
#include "..\xuiobject.h"

#include "..\..\xuidndsession.h"
#include "..\xuiobject.h"

#pragma warning(push)
#pragma warning(disable: 4800)


JSXUIObject::JSXUIObject() {
  XUIObject *pthis = (static_cast<XUIObject *>(this));
  pthis->js_addInterface(JS_XUIObject_GUID, pthis);
  pthis->js_addClassDescriptor(&JSXUIObject::classDescriptor);
  pthis->js_addFunctionTable(JSXUIObject::functionTable);
  jsSink = new JSXUIObjectEventSink(this);
  jsSink->eventSink_registerTo(pthis);
}

JSXUIObject::~JSXUIObject() {
  delete jsSink;
}

JSClass JSXUIObject::classDescriptor = {
  "XUIObject", JSCLASS_HAS_PRIVATE,
  JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,
  JS_EnumerateStub, JS_ResolveStub, JS_ConvertStub, JS_FinalizeStub,
  JSCLASS_NO_OPTIONAL_MEMBERS
};

JSFunctionSpec JSXUIObject::functionTable[] = {
  {"setAttribute", JSXUIObject::fromjs_setAttribute, 2, 0, 0},
  {"getAttribute", JSXUIObject::fromjs_getAttribute, 1, 0, 0},
  {"getAttributeInt", JSXUIObject::fromjs_getAttributeInt, 2, 0, 0},
  {"getAttributeBool", JSXUIObject::fromjs_getAttributeBool, 2, 0, 0},
  {"hasAttribute", JSXUIObject::fromjs_hasAttribute, 1, 0, 0},
  {"getNumAttributes", JSXUIObject::fromjs_getNumAttributes, 0, 0, 0},
  {"enumAttributeName", JSXUIObject::fromjs_enumAttributeName, 1, 0, 0},
  {"enumAttributeValue", JSXUIObject::fromjs_enumAttributeValue, 1, 0, 0},
  {"addChild", JSXUIObject::fromjs_addChild, 2, 0, 0},
  {"removeChild", JSXUIObject::fromjs_removeChild, 1, 0, 0},
  {"destroyChild", JSXUIObject::fromjs_destroyChild, 1, 0, 0},
  {"destroyChildren", JSXUIObject::fromjs_destroyChildren, 1, 0, 0},
  {"createObject", JSXUIObject::fromjs_createObject, 1, 0, 0},
  {"getChildren", JSXUIObject::fromjs_getChildren, 0, 0, 0},
  {"getNumChildren", JSXUIObject::fromjs_getNumChildren, 0, 0, 0},
  {"enumChild", JSXUIObject::fromjs_enumChild, 1, 0, 0},
  {"getLastChild", JSXUIObject::fromjs_getLastChild, 0, 0, 0},
  {"getFirstChild", JSXUIObject::fromjs_getFirstChild, 0, 0, 0},
  {"getParent", JSXUIObject::fromjs_getParent, 0, 0, 0},
  {"getTagName", JSXUIObject::fromjs_getTagName, 0, 0, 0},
  {"bringToFront", JSXUIObject::fromjs_bringToFront, 0, 0, 0},
  {"sendToBack", JSXUIObject::fromjs_sendToBack, 0, 0, 0},
  {"focus", JSXUIObject::fromjs_focus, 0, 0, 0},
  {"isFocused", JSXUIObject::fromjs_isFocused, 0, 0, 0},
  {"pointInRect", JSXUIObject::fromjs_pointInRect, 2, 0, 0},
  {"pointInRegion", JSXUIObject::fromjs_pointInRegion, 2, 0, 0},
  {"invalidate", JSXUIObject::fromjs_invalidate, 0, 0, 0},
  {"getX", JSXUIObject::fromjs_getX, 0, 0, 0},
  {"getY", JSXUIObject::fromjs_getY, 0, 0, 0},
  {"getWidth", JSXUIObject::fromjs_getWidth, 0, 0, 0},
  {"getHeight", JSXUIObject::fromjs_getHeight, 0, 0, 0},
  {"beginMouseCapture", JSXUIObject::fromjs_beginMouseCapture, 0, 0, 0},
  {"endMouseCapture", JSXUIObject::fromjs_endMouseCapture, 0, 0, 0},
  {"getElementById", JSXUIObject::fromjs_getElementById, 2, 0, 0},
  {"getElementByTagName", JSXUIObject::fromjs_getElementByTagName, 2, 0, 0},
  {"getElementByAttribute", JSXUIObject::fromjs_getElementByAttribute, 3, 0, 0},
  {"getElementsById", JSXUIObject::fromjs_getElementsById, 2, 0, 0},
  {"getElementsByTagName", JSXUIObject::fromjs_getElementsByTagName, 2, 0, 0},
  {"getElementsByAttribute", JSXUIObject::fromjs_getElementsByAttribute, 3, 0, 0},
  {"isMouseIn", JSXUIObject::fromjs_isMouseIn, 0, 0, 0},
  {"isDragging", JSXUIObject::fromjs_isDragging, 0, 0, 0},
  {0,0,0,0,0},
};

JSBool JSXUIObject::fromjs_setAttribute(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[0].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *attributeName
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // const char *attributeValue
  JSString * p1;
  p1 = JS_ValueToString(cx, argv[1]);
  argv[1] = STRING_TO_JSVAL(p1);
  const char *p1b = JS_GetStringBytes(p1);
  // call method
  ASSERT(object != NULL);
  object->setAttribute(p0b, p1b);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getAttribute(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[1].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *attributeName
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // call method
  ASSERT(object != NULL);
  const char * rv = object->getAttribute(p0b);
  // handle return value
  JSString *str = JS_NewStringCopyZ(cx, rv);
  *rval = STRING_TO_JSVAL(str);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getAttributeInt(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[2].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *attributeName
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // int defaultValue
  jsint p1;
  if (!JS_ValueToInt32(cx, argv[1], &p1))
    return JS_FALSE;
  argv[1] = INT_TO_JSVAL(p1);
  // call method
  ASSERT(object != NULL);
  int rv = object->getAttributeInt(p0b, p1);
  // handle return value
  *rval = INT_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getAttributeBool(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[3].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *attributeName
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // bool defaultValue
  JSBool p1;
  if (!JS_ValueToBoolean(cx, argv[1], &p1))
    return JS_FALSE;
  argv[1] = BOOLEAN_TO_JSVAL(p1);
  // call method
  ASSERT(object != NULL);
  bool rv = object->getAttributeBool(p0b, p1);
  // handle return value
  *rval = BOOLEAN_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_hasAttribute(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[4].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *attributeName
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // call method
  ASSERT(object != NULL);
  bool rv = object->hasAttribute(p0b);
  // handle return value
  *rval = BOOLEAN_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getNumAttributes(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[5].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  int rv = object->getNumAttributes();
  // handle return value
  *rval = INT_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_enumAttributeName(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[6].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // int i
  jsint p0;
  if (!JS_ValueToInt32(cx, argv[0], &p0))
    return JS_FALSE;
  argv[0] = INT_TO_JSVAL(p0);
  // call method
  ASSERT(object != NULL);
  const char * rv = object->enumAttributeName(p0);
  // handle return value
  JSString *str = JS_NewStringCopyZ(cx, rv);
  *rval = STRING_TO_JSVAL(str);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_enumAttributeValue(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[7].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // int i
  jsint p0;
  if (!JS_ValueToInt32(cx, argv[0], &p0))
    return JS_FALSE;
  argv[0] = INT_TO_JSVAL(p0);
  // call method
  ASSERT(object != NULL);
  const char * rv = object->enumAttributeValue(p0);
  // handle return value
  JSString *str = JS_NewStringCopyZ(cx, rv);
  *rval = STRING_TO_JSVAL(str);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_addChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[8].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // XUIObject *child
  JSObject *p0;
  if (!JS_ValueToObject(cx, argv[0], &p0))
    return JS_FALSE;
  argv[0] = OBJECT_TO_JSVAL(p0);
  XUIObject *p0o = NULL;
  if (p0) {
    JSScriptable *pobj = reinterpret_cast<JSScriptable*>(JS_GetPrivate(cx, p0));
    if (!pobj) {
      object->js_throwNullParamException(0, JSXUIObject::functionTable[8].name, JSXUIObject::classDescriptor.name);
      return JS_FALSE;
    }
    p0o = static_cast<XUIObject *>(pobj->js_getInterface(JS_XUIObject_GUID));
    if (!p0o) {
      object->js_throwParamTypeException(0, JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[8].name, JSXUIObject::classDescriptor.name);
      return JS_FALSE;
    }
  }
  // XUIObject *insertBefore
  JSObject *p1;
  if (!JS_ValueToObject(cx, argv[1], &p1))
    return JS_FALSE;
  argv[1] = OBJECT_TO_JSVAL(p1);
  XUIObject *p1o = NULL;
  if (p1) {
    JSScriptable *pobj = reinterpret_cast<JSScriptable*>(JS_GetPrivate(cx, p1));
    if (!pobj) {
      object->js_throwNullParamException(1, JSXUIObject::functionTable[8].name, JSXUIObject::classDescriptor.name);
      return JS_FALSE;
    }
    p1o = static_cast<XUIObject *>(pobj->js_getInterface(JS_XUIObject_GUID));
    if (!p1o) {
      object->js_throwParamTypeException(1, JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[8].name, JSXUIObject::classDescriptor.name);
      return JS_FALSE;
    }
  }
  // call method
  ASSERT(object != NULL);
  object->addChild(p0o, p1o);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_removeChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[9].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // XUIObject *child
  JSObject *p0;
  if (!JS_ValueToObject(cx, argv[0], &p0))
    return JS_FALSE;
  argv[0] = OBJECT_TO_JSVAL(p0);
  XUIObject *p0o = NULL;
  if (p0) {
    JSScriptable *pobj = reinterpret_cast<JSScriptable*>(JS_GetPrivate(cx, p0));
    if (!pobj) {
      object->js_throwNullParamException(0, JSXUIObject::functionTable[9].name, JSXUIObject::classDescriptor.name);
      return JS_FALSE;
    }
    p0o = static_cast<XUIObject *>(pobj->js_getInterface(JS_XUIObject_GUID));
    if (!p0o) {
      object->js_throwParamTypeException(0, JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[9].name, JSXUIObject::classDescriptor.name);
      return JS_FALSE;
    }
  }
  // call method
  ASSERT(object != NULL);
  object->removeChild(p0o);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_destroyChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[10].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // XUIObject *child
  JSObject *p0;
  if (!JS_ValueToObject(cx, argv[0], &p0))
    return JS_FALSE;
  argv[0] = OBJECT_TO_JSVAL(p0);
  XUIObject *p0o = NULL;
  if (p0) {
    JSScriptable *pobj = reinterpret_cast<JSScriptable*>(JS_GetPrivate(cx, p0));
    if (!pobj) {
      object->js_throwNullParamException(0, JSXUIObject::functionTable[10].name, JSXUIObject::classDescriptor.name);
      return JS_FALSE;
    }
    p0o = static_cast<XUIObject *>(pobj->js_getInterface(JS_XUIObject_GUID));
    if (!p0o) {
      object->js_throwParamTypeException(0, JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[10].name, JSXUIObject::classDescriptor.name);
      return JS_FALSE;
    }
  }
  // call method
  ASSERT(object != NULL);
  object->destroyChild(p0o);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_destroyChildren(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[11].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // PtrList < XUIObject > *deletelist
  JSObject *p0;
  if (!JS_ValueToObject(cx, argv[0], &p0))
    return JS_FALSE;
  // convert js array to PtrList
  PtrList < XUIObject > list0;
  if (!JS_IsArrayObject(cx, p0)) return JS_FALSE;
  jsuint len;
  jsint i;
  if (!JS_GetArrayLength(cx, p0, &len)) return JS_FALSE;
  JSRootedVector jsVect0(cx);
  for (i=0;i<len;i++) {
    jsval *pv = jsVect0.newVal();
    if (!JS_GetElement(cx, p0, i, pv)) return JS_FALSE;
    if (!JSVAL_IS_OBJECT(*pv)) return JS_FALSE;
    JSScriptable *o = reinterpret_cast<JSScriptable*>(JS_GetPrivate(cx, JSVAL_TO_OBJECT(*pv)));
    list0.addItem(static_cast<XUIObject*>(o));
  }
  // call method
  ASSERT(object != NULL);
  object->destroyChildren(&list0);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_createObject(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[12].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *tagname
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // call method
  ASSERT(object != NULL);
  XUIObject * rv = object->createObject(p0b);
  // handle return value
  if (!rv) *rval = JSVAL_VOID;
  else *rval = OBJECT_TO_JSVAL(rv->js_getJSObject(cx));
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getChildren(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[13].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  PtrList < XUIObject > rv = object->getChildren();
  // handle return value
  // convert PtrList to js array
  JSObject *array = JS_NewArrayObject(cx, 0, NULL);
  *rval = OBJECT_TO_JSVAL(array);
  jsval vp;
  for (int j=0;j<rv.getNumItems();j++) {
    JSScriptable *e = rv.enumItem(j);
    vp = OBJECT_TO_JSVAL(e->js_getJSObject(cx));
    JS_SetElement(cx, array, j, &vp);
  }
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getNumChildren(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[14].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  int rv = object->getNumChildren();
  // handle return value
  *rval = INT_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_enumChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[15].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // int i
  jsint p0;
  if (!JS_ValueToInt32(cx, argv[0], &p0))
    return JS_FALSE;
  argv[0] = INT_TO_JSVAL(p0);
  // call method
  ASSERT(object != NULL);
  XUIObject * rv = object->enumChild(p0);
  // handle return value
  if (!rv) *rval = JSVAL_VOID;
  else *rval = OBJECT_TO_JSVAL(rv->js_getJSObject(cx));
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getLastChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[16].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  XUIObject * rv = object->getLastChild();
  // handle return value
  if (!rv) *rval = JSVAL_VOID;
  else *rval = OBJECT_TO_JSVAL(rv->js_getJSObject(cx));
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getFirstChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[17].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  XUIObject * rv = object->getFirstChild();
  // handle return value
  if (!rv) *rval = JSVAL_VOID;
  else *rval = OBJECT_TO_JSVAL(rv->js_getJSObject(cx));
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getParent(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[18].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  XUIObject * rv = object->getParent();
  // handle return value
  if (!rv) *rval = JSVAL_VOID;
  else *rval = OBJECT_TO_JSVAL(rv->js_getJSObject(cx));
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getTagName(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[19].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  const char * rv = object->getTagName();
  // handle return value
  JSString *str = JS_NewStringCopyZ(cx, rv);
  *rval = STRING_TO_JSVAL(str);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_bringToFront(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[20].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  object->bringToFront();
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_sendToBack(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[21].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  object->sendToBack();
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_focus(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[22].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  object->focus();
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_isFocused(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[23].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  bool rv = object->isFocused();
  // handle return value
  *rval = BOOLEAN_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_pointInRect(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[24].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // int x
  jsint p0;
  if (!JS_ValueToInt32(cx, argv[0], &p0))
    return JS_FALSE;
  argv[0] = INT_TO_JSVAL(p0);
  // int y
  jsint p1;
  if (!JS_ValueToInt32(cx, argv[1], &p1))
    return JS_FALSE;
  argv[1] = INT_TO_JSVAL(p1);
  // call method
  ASSERT(object != NULL);
  bool rv = object->pointInRect(p0, p1);
  // handle return value
  *rval = BOOLEAN_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_pointInRegion(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[25].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // int x
  jsint p0;
  if (!JS_ValueToInt32(cx, argv[0], &p0))
    return JS_FALSE;
  argv[0] = INT_TO_JSVAL(p0);
  // int y
  jsint p1;
  if (!JS_ValueToInt32(cx, argv[1], &p1))
    return JS_FALSE;
  argv[1] = INT_TO_JSVAL(p1);
  // call method
  ASSERT(object != NULL);
  bool rv = object->pointInRegion(p0, p1);
  // handle return value
  *rval = BOOLEAN_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_invalidate(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[26].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  object->invalidate();
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getX(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[27].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  int rv = object->getX();
  // handle return value
  *rval = INT_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getY(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[28].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  int rv = object->getY();
  // handle return value
  *rval = INT_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getWidth(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[29].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  int rv = object->getWidth();
  // handle return value
  *rval = INT_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getHeight(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[30].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  int rv = object->getHeight();
  // handle return value
  *rval = INT_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_beginMouseCapture(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[31].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  object->beginMouseCapture();
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_endMouseCapture(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[32].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  object->endMouseCapture();
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getElementById(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[33].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *id
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // bool local
  JSBool p1;
  if (!JS_ValueToBoolean(cx, argv[1], &p1))
    return JS_FALSE;
  argv[1] = BOOLEAN_TO_JSVAL(p1);
  // call method
  ASSERT(object != NULL);
  XUIObject * rv = object->getElementById(p0b, p1);
  // handle return value
  if (!rv) *rval = JSVAL_VOID;
  else *rval = OBJECT_TO_JSVAL(rv->js_getJSObject(cx));
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getElementByTagName(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[34].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *tag
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // bool local
  JSBool p1;
  if (!JS_ValueToBoolean(cx, argv[1], &p1))
    return JS_FALSE;
  argv[1] = BOOLEAN_TO_JSVAL(p1);
  // call method
  ASSERT(object != NULL);
  XUIObject * rv = object->getElementByTagName(p0b, p1);
  // handle return value
  if (!rv) *rval = JSVAL_VOID;
  else *rval = OBJECT_TO_JSVAL(rv->js_getJSObject(cx));
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getElementByAttribute(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[35].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *attrName
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // const char *attrValue
  JSString * p1;
  p1 = JS_ValueToString(cx, argv[1]);
  argv[1] = STRING_TO_JSVAL(p1);
  const char *p1b = JS_GetStringBytes(p1);
  // bool local
  JSBool p2;
  if (!JS_ValueToBoolean(cx, argv[2], &p2))
    return JS_FALSE;
  argv[2] = BOOLEAN_TO_JSVAL(p2);
  // call method
  ASSERT(object != NULL);
  XUIObject * rv = object->getElementByAttribute(p0b, p1b, p2);
  // handle return value
  if (!rv) *rval = JSVAL_VOID;
  else *rval = OBJECT_TO_JSVAL(rv->js_getJSObject(cx));
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getElementsById(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[36].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *id
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // bool local
  JSBool p1;
  if (!JS_ValueToBoolean(cx, argv[1], &p1))
    return JS_FALSE;
  argv[1] = BOOLEAN_TO_JSVAL(p1);
  // call method
  ASSERT(object != NULL);
  PtrList < XUIObject > * rv = object->getElementsById(p0b, p1);
  // handle return value
  // convert PtrList to js array
  JSObject *array = JS_NewArrayObject(cx, 0, NULL);
  *rval = OBJECT_TO_JSVAL(array);
  if (!rv) return JS_TRUE; // success, empty array
  jsval vp;
  for (int j=0;j<rv->getNumItems();j++) {
    JSScriptable *e = rv->enumItem(j);
    vp = OBJECT_TO_JSVAL(e->js_getJSObject(cx));
    JS_SetElement(cx, array, j, &vp);
  }
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getElementsByTagName(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[37].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *tag
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // bool local
  JSBool p1;
  if (!JS_ValueToBoolean(cx, argv[1], &p1))
    return JS_FALSE;
  argv[1] = BOOLEAN_TO_JSVAL(p1);
  // call method
  ASSERT(object != NULL);
  PtrList < XUIObject > * rv = object->getElementsByTagName(p0b, p1);
  // handle return value
  // convert PtrList to js array
  JSObject *array = JS_NewArrayObject(cx, 0, NULL);
  *rval = OBJECT_TO_JSVAL(array);
  if (!rv) return JS_TRUE; // success, empty array
  jsval vp;
  for (int j=0;j<rv->getNumItems();j++) {
    JSScriptable *e = rv->enumItem(j);
    vp = OBJECT_TO_JSVAL(e->js_getJSObject(cx));
    JS_SetElement(cx, array, j, &vp);
  }
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_getElementsByAttribute(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[38].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // const char *attrName
  JSString * p0;
  p0 = JS_ValueToString(cx, argv[0]);
  argv[0] = STRING_TO_JSVAL(p0);
  const char *p0b = JS_GetStringBytes(p0);
  // const char *attrValue
  JSString * p1;
  p1 = JS_ValueToString(cx, argv[1]);
  argv[1] = STRING_TO_JSVAL(p1);
  const char *p1b = JS_GetStringBytes(p1);
  // bool local
  JSBool p2;
  if (!JS_ValueToBoolean(cx, argv[2], &p2))
    return JS_FALSE;
  argv[2] = BOOLEAN_TO_JSVAL(p2);
  // call method
  ASSERT(object != NULL);
  PtrList < XUIObject > * rv = object->getElementsByAttribute(p0b, p1b, p2);
  // handle return value
  // convert PtrList to js array
  JSObject *array = JS_NewArrayObject(cx, 0, NULL);
  *rval = OBJECT_TO_JSVAL(array);
  if (!rv) return JS_TRUE; // success, empty array
  jsval vp;
  for (int j=0;j<rv->getNumItems();j++) {
    JSScriptable *e = rv->enumItem(j);
    vp = OBJECT_TO_JSVAL(e->js_getJSObject(cx));
    JS_SetElement(cx, array, j, &vp);
  }
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_isMouseIn(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[39].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  bool rv = object->isMouseIn();
  // handle return value
  *rval = BOOLEAN_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

JSBool JSXUIObject::fromjs_isDragging(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {
  // get instance
  XUIObject *object = static_cast<XUIObject *>(reinterpret_cast<JSScriptable *>(JS_GetPrivate(cx, obj)));
  if (!object) {
    JSScriptable::js_throwNullCallException(JSXUIObject::classDescriptor.name, JSXUIObject::functionTable[40].name);
    return JS_FALSE;
  }
  // record context
  object->js_setCurrentContext(cx);
  // call method
  ASSERT(object != NULL);
  bool rv = object->isDragging();
  // handle return value
  *rval = BOOLEAN_TO_JSVAL(rv);
  // success
  return JS_TRUE;
}

// ----------------------------------------------------------------------------

void JSXUIObjectEventSink::eventSink_onAttributeChanged(XUIObjectEventSource *source, const char *attributeName, const char *attributeValue) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onattributechanged");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[2];
    JSString *str0= JS_NewStringCopyZ((static_cast<XUIObject *>(m_jsClass))->js_getCurrentContext(), attributeName);
    p[0] = STRING_TO_JSVAL(str0);
    JSString *str1= JS_NewStringCopyZ((static_cast<XUIObject *>(m_jsClass))->js_getCurrentContext(), attributeValue);
    p[1] = STRING_TO_JSVAL(str1);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 2, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onBeginDrag(XUIObjectEventSource *source, XUIDndSession *s) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onbegindrag");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[1];
    if (!s) p[0] = NULL;
    else p[0] = OBJECT_TO_JSVAL(s->js_getJSObject((static_cast<XUIObject *>(m_jsClass))->js_getCurrentContext()));
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 1, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onEndDrag(XUIObjectEventSource *source, XUIDndSession *s, bool success) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onenddrag");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[2];
    if (!s) p[0] = NULL;
    else p[0] = OBJECT_TO_JSVAL(s->js_getJSObject((static_cast<XUIObject *>(m_jsClass))->js_getCurrentContext()));
    JSBool p1 = (JSBool)success;
    p[1] = BOOLEAN_TO_JSVAL(p1);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 2, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onDragEnter(XUIObjectEventSource *source, XUIDndSession *dndSession) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("ondragenter");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[1];
    if (!dndSession) p[0] = NULL;
    else p[0] = OBJECT_TO_JSVAL(dndSession->js_getJSObject((static_cast<XUIObject *>(m_jsClass))->js_getCurrentContext()));
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 1, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onDragLeave(XUIObjectEventSource *source, XUIDndSession *dndSession) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("ondragleave");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[1];
    if (!dndSession) p[0] = NULL;
    else p[0] = OBJECT_TO_JSVAL(dndSession->js_getJSObject((static_cast<XUIObject *>(m_jsClass))->js_getCurrentContext()));
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 1, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onDragOver(XUIObjectEventSource *source, XUIDndSession *dndSession, int x, int y) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("ondragover");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[3];
    if (!dndSession) p[0] = NULL;
    else p[0] = OBJECT_TO_JSVAL(dndSession->js_getJSObject((static_cast<XUIObject *>(m_jsClass))->js_getCurrentContext()));
    jsint p1 = (jsint)x;
    p[1] = INT_TO_JSVAL(p1);
    jsint p2 = (jsint)y;
    p[2] = INT_TO_JSVAL(p2);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 3, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onDragDrop(XUIObjectEventSource *source, XUIDndSession *dndSession, int x, int y) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("ondragdrop");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[3];
    if (!dndSession) p[0] = NULL;
    else p[0] = OBJECT_TO_JSVAL(dndSession->js_getJSObject((static_cast<XUIObject *>(m_jsClass))->js_getCurrentContext()));
    jsint p1 = (jsint)x;
    p[1] = INT_TO_JSVAL(p1);
    jsint p2 = (jsint)y;
    p[2] = INT_TO_JSVAL(p2);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 3, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onInit(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("oninit");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onDestroy(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("ondestroy");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onResize(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onresize");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onLeftButtonDown(XUIObjectEventSource *source, int x, int y) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onleftbuttondown");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[2];
    jsint p0 = (jsint)x;
    p[0] = INT_TO_JSVAL(p0);
    jsint p1 = (jsint)y;
    p[1] = INT_TO_JSVAL(p1);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 2, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onLeftButtonUp(XUIObjectEventSource *source, int x, int y) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onleftbuttonup");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[2];
    jsint p0 = (jsint)x;
    p[0] = INT_TO_JSVAL(p0);
    jsint p1 = (jsint)y;
    p[1] = INT_TO_JSVAL(p1);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 2, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onRightButtonDown(XUIObjectEventSource *source, int x, int y) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onrightbuttondown");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[2];
    jsint p0 = (jsint)x;
    p[0] = INT_TO_JSVAL(p0);
    jsint p1 = (jsint)y;
    p[1] = INT_TO_JSVAL(p1);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 2, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onRightButtonUp(XUIObjectEventSource *source, int x, int y) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onrightbuttonup");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[2];
    jsint p0 = (jsint)x;
    p[0] = INT_TO_JSVAL(p0);
    jsint p1 = (jsint)y;
    p[1] = INT_TO_JSVAL(p1);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 2, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onMiddleButtonDown(XUIObjectEventSource *source, int x, int y) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onmiddlebuttondown");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[2];
    jsint p0 = (jsint)x;
    p[0] = INT_TO_JSVAL(p0);
    jsint p1 = (jsint)y;
    p[1] = INT_TO_JSVAL(p1);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 2, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onMiddleButtonUp(XUIObjectEventSource *source, int x, int y) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onmiddlebuttonup");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[2];
    jsint p0 = (jsint)x;
    p[0] = INT_TO_JSVAL(p0);
    jsint p1 = (jsint)y;
    p[1] = INT_TO_JSVAL(p1);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 2, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onMouseWheelDown(XUIObjectEventSource *source, int click, int lines) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onmousewheeldown");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[2];
    jsint p0 = (jsint)click;
    p[0] = INT_TO_JSVAL(p0);
    jsint p1 = (jsint)lines;
    p[1] = INT_TO_JSVAL(p1);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 2, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onMouseWheelUp(XUIObjectEventSource *source, int click, int lines) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onmousewheelup");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[2];
    jsint p0 = (jsint)click;
    p[0] = INT_TO_JSVAL(p0);
    jsint p1 = (jsint)lines;
    p[1] = INT_TO_JSVAL(p1);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 2, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onMouseMove(XUIObjectEventSource *source, int x, int y) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onmousemove");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[2];
    jsint p0 = (jsint)x;
    p[0] = INT_TO_JSVAL(p0);
    jsint p1 = (jsint)y;
    p[1] = INT_TO_JSVAL(p1);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 2, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onMouseEnter(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onmouseenter");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onMouseLeave(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onmouseleave");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onGetFocus(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("ongetfocus");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onLoseFocus(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onlosefocus");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onShow(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onshow");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onHide(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onhide");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onActivate(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onactivate");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onDeactivate(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("ondeactivate");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onEnable(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onenable");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onDisable(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("ondisable");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onChar(XUIObjectEventSource *source, unsigned int c) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onchar");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[1];
    jsint p0 = (jsint)c;
    p[0] = INT_TO_JSVAL(p0);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 1, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onKeyDown(XUIObjectEventSource *source, unsigned int keyCode) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onkeydown");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[1];
    jsint p0 = (jsint)keyCode;
    p[0] = INT_TO_JSVAL(p0);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 1, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onKeyUp(XUIObjectEventSource *source, unsigned int keyCode) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onkeyup");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    jsval p[1];
    jsint p0 = (jsint)keyCode;
    p[0] = INT_TO_JSVAL(p0);
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 1, p, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onMinimize(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onminimize");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onRestore(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onrestore");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onMaximize(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("onmaximize");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}

void JSXUIObjectEventSink::eventSink_onCancelCapture(XUIObjectEventSource *source) {
  PtrList<JSEventListener> *listeners = (static_cast<XUIObject *>(m_jsClass))->js_getEventListeners("oncancelcapture");
  if (!listeners) return;
  jsval rv;
  foreach(*listeners)
    JSEventListener *listener = (*listeners).getfor();
    JS_CallFunctionValue(listener->m_context, listener->m_object, listener->m_function, 0, NULL, &rv);
  endfor
}


