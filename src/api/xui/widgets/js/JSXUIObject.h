// ----------------------------------------------------------------------------
// Generated by JSScriptable Factory - DO NOT EDIT
// 
// File        : ../js/JSXUIObject.h
// Class       : XUIObject
// class layer : Javascript Dispatcher
// ----------------------------------------------------------------------------

#ifndef JSXUIOBJECT_H
#define JSXUIOBJECT_H

#include <api/js/jsscriptable.h>
#include "../sourcesink/XUIObjectEventSink.h"
#include <api/js/jseventlistener.h>

class XUIDndSession;
class XUIObject;


const GUID JS_XUIObject_GUID = { 0xa9de5d3d, 0x883f, 0x423a, { 0xbf, 0x3a, 0x36, 0xc8, 0x10, 0x07, 0xb9, 0x01 } };

class JSXUIObjectEventSink;
// ----------------------------------------------------------------------------

class JSXUIObject {
  protected:
    JSXUIObject();
    virtual ~JSXUIObject();
  
  public:
    static JSClass JSXUIObject::classDescriptor;
    static JSFunctionSpec JSXUIObject::functionTable[];
    
  public:
    static JSBool fromjs_setAttribute(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getAttribute(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getAttributeInt(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getAttributeBool(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_hasAttribute(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getNumAttributes(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_enumAttributeName(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_enumAttributeValue(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_addChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_removeChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_destroyChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_destroyChildren(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_createObject(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getChildren(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getNumChildren(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_enumChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getLastChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getFirstChild(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getParent(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getTagName(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_bringToFront(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_sendToBack(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_focus(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_isFocused(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_pointInRect(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_pointInRegion(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_invalidate(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getX(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getY(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getWidth(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getHeight(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_beginMouseCapture(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_endMouseCapture(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getElementById(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getElementByTagName(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getElementByAttribute(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getElementsById(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getElementsByTagName(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_getElementsByAttribute(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_isMouseIn(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
    static JSBool fromjs_isDragging(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);
  
    void tojs_onAttributeChanged(const char *attributeName, const char *attributeValue);
    void tojs_onBeginDrag(XUIDndSession *s);
    void tojs_onEndDrag(XUIDndSession *s, bool success);
    void tojs_onDragEnter(XUIDndSession *dndSession);
    void tojs_onDragLeave(XUIDndSession *dndSession);
    void tojs_onDragOver(XUIDndSession *dndSession, int x, int y);
    void tojs_onDragDrop(XUIDndSession *dndSession, int x, int y);
    void tojs_onInit();
    void tojs_onDestroy();
    void tojs_onResize();
    void tojs_onLeftButtonDown(int x, int y);
    void tojs_onLeftButtonUp(int x, int y);
    void tojs_onRightButtonDown(int x, int y);
    void tojs_onRightButtonUp(int x, int y);
    void tojs_onMiddleButtonDown(int x, int y);
    void tojs_onMiddleButtonUp(int x, int y);
    void tojs_onMouseWheelDown(int click, int lines);
    void tojs_onMouseWheelUp(int click, int lines);
    void tojs_onMouseMove(int x, int y);
    void tojs_onMouseEnter();
    void tojs_onMouseLeave();
    void tojs_onGetFocus();
    void tojs_onLoseFocus();
    void tojs_onShow();
    void tojs_onHide();
    void tojs_onActivate();
    void tojs_onDeactivate();
    void tojs_onEnable();
    void tojs_onDisable();
    void tojs_onChar(unsigned int c);
    void tojs_onKeyDown(unsigned int keyCode);
    void tojs_onKeyUp(unsigned int keyCode);
    void tojs_onMinimize();
    void tojs_onRestore();
    void tojs_onMaximize();
    void tojs_onCancelCapture();
  
  private:
    JSXUIObjectEventSink *jsSink;
};

// ----------------------------------------------------------------------------

class JSXUIObjectEventSink : public XUIObjectEventSink {
  public:
    JSXUIObjectEventSink(JSXUIObject *jsclass) : m_jsClass(jsclass) {}
    virtual ~JSXUIObjectEventSink() {}
    virtual void eventSink_onAttributeChanged(XUIObjectEventSource *source, const char *attributeName, const char *attributeValue);
    virtual void eventSink_onBeginDrag(XUIObjectEventSource *source, XUIDndSession *s);
    virtual void eventSink_onEndDrag(XUIObjectEventSource *source, XUIDndSession *s, bool success);
    virtual void eventSink_onDragEnter(XUIObjectEventSource *source, XUIDndSession *dndSession);
    virtual void eventSink_onDragLeave(XUIObjectEventSource *source, XUIDndSession *dndSession);
    virtual void eventSink_onDragOver(XUIObjectEventSource *source, XUIDndSession *dndSession, int x, int y);
    virtual void eventSink_onDragDrop(XUIObjectEventSource *source, XUIDndSession *dndSession, int x, int y);
    virtual void eventSink_onInit(XUIObjectEventSource *source);
    virtual void eventSink_onDestroy(XUIObjectEventSource *source);
    virtual void eventSink_onResize(XUIObjectEventSource *source);
    virtual void eventSink_onLeftButtonDown(XUIObjectEventSource *source, int x, int y);
    virtual void eventSink_onLeftButtonUp(XUIObjectEventSource *source, int x, int y);
    virtual void eventSink_onRightButtonDown(XUIObjectEventSource *source, int x, int y);
    virtual void eventSink_onRightButtonUp(XUIObjectEventSource *source, int x, int y);
    virtual void eventSink_onMiddleButtonDown(XUIObjectEventSource *source, int x, int y);
    virtual void eventSink_onMiddleButtonUp(XUIObjectEventSource *source, int x, int y);
    virtual void eventSink_onMouseWheelDown(XUIObjectEventSource *source, int click, int lines);
    virtual void eventSink_onMouseWheelUp(XUIObjectEventSource *source, int click, int lines);
    virtual void eventSink_onMouseMove(XUIObjectEventSource *source, int x, int y);
    virtual void eventSink_onMouseEnter(XUIObjectEventSource *source);
    virtual void eventSink_onMouseLeave(XUIObjectEventSource *source);
    virtual void eventSink_onGetFocus(XUIObjectEventSource *source);
    virtual void eventSink_onLoseFocus(XUIObjectEventSource *source);
    virtual void eventSink_onShow(XUIObjectEventSource *source);
    virtual void eventSink_onHide(XUIObjectEventSource *source);
    virtual void eventSink_onActivate(XUIObjectEventSource *source);
    virtual void eventSink_onDeactivate(XUIObjectEventSource *source);
    virtual void eventSink_onEnable(XUIObjectEventSource *source);
    virtual void eventSink_onDisable(XUIObjectEventSource *source);
    virtual void eventSink_onChar(XUIObjectEventSource *source, unsigned int c);
    virtual void eventSink_onKeyDown(XUIObjectEventSource *source, unsigned int keyCode);
    virtual void eventSink_onKeyUp(XUIObjectEventSource *source, unsigned int keyCode);
    virtual void eventSink_onMinimize(XUIObjectEventSource *source);
    virtual void eventSink_onRestore(XUIObjectEventSource *source);
    virtual void eventSink_onMaximize(XUIObjectEventSource *source);
    virtual void eventSink_onCancelCapture(XUIObjectEventSource *source);
  private:
    JSXUIObject *m_jsClass;
};

#endif // JSXUIOBJECT_H
