// ----------------------------------------------------------------------------
// Generated by SourceSink Factory - DO NOT EDIT
// 
// File        : ../sourcesink/XUIObjectEventSource.cpp
// Class       : XUIObject
// class layer : Event Source for for XUIObject
// ----------------------------------------------------------------------------

#include "precomp.h"
#include "XUIObjectEventSource.h"
#include "XUIObjectEventSink.h"
#include "..\xuiobject.h"


void XUIObjectEventSource::eventSource_onAttributeChanged(const char *attributeName, const char *attributeValue) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onAttributeChanged(this, attributeName, attributeValue);
  endfor
}

void XUIObjectEventSource::eventSource_onBeginDrag(XUIDndSession *s) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onBeginDrag(this, s);
  endfor
}

void XUIObjectEventSource::eventSource_onEndDrag(XUIDndSession *s, bool success) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onEndDrag(this, s, success);
  endfor
}

void XUIObjectEventSource::eventSource_onDragEnter(XUIDndSession *dndSession) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onDragEnter(this, dndSession);
  endfor
}

void XUIObjectEventSource::eventSource_onDragLeave(XUIDndSession *dndSession) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onDragLeave(this, dndSession);
  endfor
}

void XUIObjectEventSource::eventSource_onDragOver(XUIDndSession *dndSession, int x, int y) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onDragOver(this, dndSession, x, y);
  endfor
}

void XUIObjectEventSource::eventSource_onDragDrop(XUIDndSession *dndSession, int x, int y) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onDragDrop(this, dndSession, x, y);
  endfor
}

void XUIObjectEventSource::eventSource_onInit() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onInit(this);
  endfor
}

void XUIObjectEventSource::eventSource_onDestroy() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onDestroy(this);
  endfor
}

void XUIObjectEventSource::eventSource_onResize() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onResize(this);
  endfor
}

void XUIObjectEventSource::eventSource_onLeftButtonDown(int x, int y) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onLeftButtonDown(this, x, y);
  endfor
}

void XUIObjectEventSource::eventSource_onLeftButtonUp(int x, int y) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onLeftButtonUp(this, x, y);
  endfor
}

void XUIObjectEventSource::eventSource_onRightButtonDown(int x, int y) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onRightButtonDown(this, x, y);
  endfor
}

void XUIObjectEventSource::eventSource_onRightButtonUp(int x, int y) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onRightButtonUp(this, x, y);
  endfor
}

void XUIObjectEventSource::eventSource_onMiddleButtonDown(int x, int y) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onMiddleButtonDown(this, x, y);
  endfor
}

void XUIObjectEventSource::eventSource_onMiddleButtonUp(int x, int y) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onMiddleButtonUp(this, x, y);
  endfor
}

void XUIObjectEventSource::eventSource_onMouseWheelDown(int click, int lines) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onMouseWheelDown(this, click, lines);
  endfor
}

void XUIObjectEventSource::eventSource_onMouseWheelUp(int click, int lines) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onMouseWheelUp(this, click, lines);
  endfor
}

void XUIObjectEventSource::eventSource_onMouseMove(int x, int y) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onMouseMove(this, x, y);
  endfor
}

void XUIObjectEventSource::eventSource_onMouseEnter() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onMouseEnter(this);
  endfor
}

void XUIObjectEventSource::eventSource_onMouseLeave() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onMouseLeave(this);
  endfor
}

void XUIObjectEventSource::eventSource_onGetFocus() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onGetFocus(this);
  endfor
}

void XUIObjectEventSource::eventSource_onLoseFocus() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onLoseFocus(this);
  endfor
}

void XUIObjectEventSource::eventSource_onShow() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onShow(this);
  endfor
}

void XUIObjectEventSource::eventSource_onHide() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onHide(this);
  endfor
}

void XUIObjectEventSource::eventSource_onActivate() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onActivate(this);
  endfor
}

void XUIObjectEventSource::eventSource_onDeactivate() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onDeactivate(this);
  endfor
}

void XUIObjectEventSource::eventSource_onEnable() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onEnable(this);
  endfor
}

void XUIObjectEventSource::eventSource_onDisable() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onDisable(this);
  endfor
}

void XUIObjectEventSource::eventSource_onChar(unsigned int c) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onChar(this, c);
  endfor
}

void XUIObjectEventSource::eventSource_onKeyDown(unsigned int keyCode) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onKeyDown(this, keyCode);
  endfor
}

void XUIObjectEventSource::eventSource_onKeyUp(unsigned int keyCode) {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onKeyUp(this, keyCode);
  endfor
}

void XUIObjectEventSource::eventSource_onMinimize() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onMinimize(this);
  endfor
}

void XUIObjectEventSource::eventSource_onRestore() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onRestore(this);
  endfor
}

void XUIObjectEventSource::eventSource_onMaximize() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onMaximize(this);
  endfor
}

void XUIObjectEventSource::eventSource_onCancelCapture() {
  foreach(m_sinks)
    m_sinks.getfor()->eventSink_onCancelCapture(this);
  endfor
}

