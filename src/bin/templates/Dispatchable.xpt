<XPP:Template>

<!-- dispatchable interface - header file -->

<module id="h">

// ----------------------------------------------------------------------------<br/>
// Generated by InterfaceFactory [<datetime/>]<br/>
// <br/>
// File        : <class data="interfaceheader"/><br/>
// Class       : <class data="name"/><br/>
// class layer : Dispatchable Interface
// ----------------------------------------------------------------------------<br/>
<br/>

<!-- compiler safeguards -->

#ifndef __<class data="name" ucase="1"/>_H<br/>
#define __<class data="name" ucase="1"/>_H<br/>
<br/>
#include "bfc/dispatch.h"<br/>
<br/>

<autoheader/><br/>
<br/>

<!-- custom header codeblocks -->
<foreach objects="codeblocks" type="interface.header.h">
  <codeblock data="block"/>
  <br/>
</foreach>

<!-- class declaration -->

// ----------------------------------------------------------------------------<br/>
<br/>
class COMEXP <class data="name"/> : public Dispatchable
<ob/><br/>
<indent>

  <!--protected constructor & destructor -->

  protected:<br/>

  <indent>
    <class data="name"/>() {}<br/>
    ~<class data="name"/>() {}<br/>
  </indent>  

  <!-- custom class codeblocks -->

  <resetscope/>
  <foreach objects="codeblocks" type="interface">
   <codeblock data="scope"/>
   <indent>
      <codeblock data="block"/>
      <br/>
   </indent>  
  </foreach>

  <!-- methods external entry point -->

  <resetscope/>
  <foreach objects="methods">
   <if object="methods" isoftype="dispatch" not="1"> 
    <skip objects="methods" type="ctor|dtor|static|inline|nodispatch"/> 
    <skip objects="methods" type="private"/> 
   </if>
   <skip objects="methods" type="isretired"/> 
   <method data="scope"/>
   <foreach objects="codeblocks" type="interface.$(method.name).h">
     <codeblock data="block"/><br/>
   </foreach>
   <indent>
    <method data="returntype"/>
    <method data="name"/>
    (
    <foreach objects="params">
      <forcomma/>
      <param data="type"/>
      <param data="name"/>
      <param data="defval"/>
    </foreach>
    );<br/>
   </indent>
  </foreach>
  <br/>

  <!-- dispatchable IDs -->

  protected:<br/>
  <indent>
    enum<ob/><br/>
    <indent>
      <foreach objects="methods">
        <if object="methods" isoftype="dispatch" not="1"> 
          <skip objects="methods" type="ctor|dtor|static|inline|nodispatch"/> 
          <skip objects="methods" type="private"/> 
        </if>
        <skip objects="methods" type="isretired"/> 
        <foreach objects="codeblocks" type="dispatchable.$(method.name).enum">
          <codeblock data="block"/><br/>
        </foreach>
        <method data="dispatch_sid"/><method data="multipleid"/>%20= <method data="dispatch_id"/>,<br/>
      </foreach>
    </indent>
    <cb/>;<br/>
  </indent>
</indent>
<cb/>;<br/>
<br/>
// ----------------------------------------------------------------------------<br/>
<br/>

<!-- methods calls from external to internal -->

<foreach objects="methods">
  <if object="methods" isoftype="dispatch" not="1"> 
   <skip objects="methods" type="ctor|dtor|static|inline|nodispatch"/> 
   <skip objects="methods" type="private"/> 
  </if>
  <skip objects="methods" type="isretired"/> 

  <foreach objects="codeblocks" type="dispatchable.$(method.name).bridge">
    <codeblock data="block"/><br/>
  </foreach>
  inline <method data="returntype"/>
  <class data="name"/>::
  <method data="name"/>
  (
  <foreach objects="params">
    <forcomma/>
    <param data="type"/>
    <param data="name"/>
  </foreach>
  )
  <ob/><br/>
  <indent>
    <foreach objects="codeblocks" type="dispatchable.$(method.name).precall">
     <codeblock data="block"/><br/>
    </foreach>
    <if object="methods" isoftype="void" not="1"><method data="returntype"/>__retval = </if>
    <method data="dispatch_call"/>
    (
    <method data="dispatch_sid"/><method data="multipleid"/><method data="dispatch_defretval"/>
    <foreach objects="params">
      , <param data="name"/>
    </foreach>
    );<br/>
    <foreach objects="codeblocks" type="dispatchable.$(method.name).postcall">
     <codeblock data="block"/><br/>
    </foreach>
    <if object="methods" isoftype="void" not="1">return __retval;<br/></if>
  </indent>
  <cb/><br/>
  <br/> 
</foreach>
// ----------------------------------------------------------------------------<br/>
<br/>


<!-- custom footer codeblocks -->
<foreach objects="codeblocks" type="interface.footer.h">
  <codeblock data="block"/>
  <br/>
</foreach>

#endif // __<class data="name" ucase="1"/>_H<br/>

</module>

<!-- dispatchable interface - cpp file -->

<module id="cpp">
// ----------------------------------------------------------------------------<br/>
// Generated by InterfaceFactory [<datetime/>]<br/>
// <br/>
// File        : <class data="interfacemodule"/><br/>
// Class       : <class data="name"/><br/>
// class layer : Dispatchable Interface
// ----------------------------------------------------------------------------<br/>
<br/>
<stdafx/>
#include "<extern data="interface_header"/>"<br/>
<br/>

<!-- custom header codeblocks -->
<foreach objects="codeblocks" type="interface.header.cpp">
  <codeblock data="block"/>
  <br/>
</foreach>

<br/>

<!-- custom footer codeblocks -->
<foreach objects="codeblocks" type="interface.footer.cpp">
  <codeblock data="block"/>
  <br/>
</foreach>

</module>


<!-- dispatchable interface - receiver class - header file -->

<module id="h_dispatch">

// ----------------------------------------------------------------------------<br/>
// Generated by InterfaceFactory [<datetime/>]<br/>
// <br/>
// File        : <class data="dispatchheader"/><br/>
// Class       : <class data="name"/><br/>
// class layer : Dispatchable Receiver
// ----------------------------------------------------------------------------<br/>
<br/>

<!-- compiler safeguards -->

#ifndef __<class data="name" ucase="1"/>X_H<br/>
#define __<class data="name" ucase="1"/>X_H<br/>
<br/>

#include "<class data="InterfaceHeader"/>"<br/>
<br/>
<autoheader/><br/>
<br/>

<!-- pure virtual class declaration -->
<br/>
// ----------------------------------------------------------------------------<br/>
<br/>
class COMEXP <class data="name"/>X : public <class data="name"/>
<ob/><br/>
<indent>

  <!--protected constructor -->

  protected:<br/>

  <indent>
    <class data="name"/>X() {}<br/>
  </indent>  

  <!-- methods -->

  <resetscope/>
  <foreach objects="methods">
    <if object="methods" isoftype="dispatch" not="1"> 
     <skip objects="methods" type="ctor|dtor|static|inline|nodispatch"/> 
     <skip objects="methods" type="private"/> 
    </if>
    <skip objects="methods" type="isretired"/> 
    <method data="scope"/>
    <foreach objects="codeblocks" type="interface.$(method.name).h">
      <codeblock data="block"/><br/>
    </foreach>

    <indent>

      virtual <method data="returntype"/>
      <method data="name"/><method data="multipleid"/>
      (
      <foreach objects="params">
        <forcomma/>
        <param data="type"/>
        <param data="name"/>
        <param data="defval"/>
      </foreach>
      )
      <if object="methods" isoftype="multiple" not="1">
        =0
        <else>
          <if object="methods" isoftype="firstofmultiple">
            =0
          </if>
        </else>
      </if>
      ;<br/>
  
      <if object="methods" isoftype="hasretiredversions">
       <foreach objects="retiredmethods">

          virtual <method data="returntype"/> <!-- begin dup -->
          <method data="name"/>
          (
          <foreach objects="params">
            <forcomma/>
            <param data="type"/>
            <param data="name"/>
            <param data="defval"/>
          </foreach>
          )=0;<br/> <!-- end dup -->

       </foreach>
      </if>

    </indent>

  </foreach>
  <br/>
  protected:<br/>
  <indent>
    RECVS_DISPATCH;<br/>
  </indent>
</indent>
<cb/>;<br/>
<br/>
#endif // __<class data="name" ucase="1"/>X_H<br/>
</module>

<module id="cpp_dispatch">
// ----------------------------------------------------------------------------<br/>
// Generated by InterfaceFactory [<datetime/>]<br/>
// <br/>
// File        : <class data="dispatchmodule"/><br/>
// Class       : <class data="name"/><br/>
// class layer : Dispatchable Receiver
// ----------------------------------------------------------------------------<br/>
<stdafx/>
<br/>
#include "<extern data="dispatchable_header"/>"<br/>
#include "<class data="ImplementationHeader"/>"<br/>
<br/>

<!-- dispatching -->

#ifdef CBCLASS<br/>
#undef CBCLASS<br/>
#endif<br/>
<br/>
#define CBCLASS <class data="name"/>X<br/>
START_DISPATCH;<br/>
<indent>
  <foreach objects="methods">
    <if object="methods" isoftype="dispatch" not="1"> 
     <skip objects="methods" type="ctor|dtor|static|inline|nodispatch"/> 
     <skip objects="methods" type="private"/> 
    </if>
    <skip objects="methods" type="isretired"/> 
    <foreach objects="codeblocks" type="interface.$(method.name).cpp">
      <codeblock data="block"/><br/>
    </foreach>
    <if object="methods" isoftype="hasretiredversions">
     case <method data="dispatch_sid"/>:<br/>
     <indent>
       switch (nparam)<ob/><br/>
       <indent>
         default:
         <if object="methods" isoftype="void">%20vcb<else>%20cb</else></if>
         (%26CBCLASS::<method data="name"/>, retval, params); break;<br/>
       </indent>
      <foreach objects="retiredmethods">
       <indent>
         case <method data="numparams"/>:
         <if object="methods" isoftype="void">%20vcb<else>%20cb</else></if>
         (%26CBCLASS::<method data="name"/>, retval, params); break;<br/>
       </indent>
      </foreach>
     <cb/><br/>
     </indent>
     break;<br/>
     <else>

      <method data="dispatch_cb"/>
      (
      <method data="dispatch_sid"/><method data="multipleid"/>
      , <method data="name"/><method data="multipleid"/>
      );<br/>

     </else>

    </if>

  </foreach>
</indent>
END_DISPATCH;<br/>
#undef CBCLASS<br/>

<br/>
<foreach objects="methods">
  <if object="methods" isoftype="multiple">
    <if object="methods" isoftype="firstofmultiple|ctor|dtor|static|inline|nodispatch" not="1">
      <method data="returntype"/><class data="name"/>X::<method data="name"/><method data="multipleid"/>
      (
      <foreach objects="params">
        <forcomma/>
        <param data="type"/>
        <param data="name"/>
        <param data="defval"/>
      </foreach>
      ) { <method data="return"/>static_cast%3C<class data="implname"/>%20*%3E(this)-><method data="name"/>(<foreach objects="params"><forcomma/><param data="name"/></foreach>); }<br/>
    </if>
  </if>
</foreach>

</module>

</XPP:Template>

