<XPP:StandaloneTemplate classname="JS*" inherit="parallel" desc="Javascript Dispatcher" >

<!-- Javascript Dispatcher - header file -->

<module id="h" filename="$jsdir.JS*.h">

// ----------------------------------------------------------------------------<br/>
// Generated by JSScriptable Factory - DO NOT EDIT<br/>
// <br/>
// File        : <moduledata data="filename"/><br/>
// Class       : <class data="name"/><br/>
// class layer : Javascript Dispatcher
// ----------------------------------------------------------------------------<br/>
<br/>

<!-- compiler safeguards -->

#ifndef <class data="classlayer" ucase="1"/>_H<br/>
#define <class data="classlayer" ucase="1"/>_H<br/>

<br/>
#include %3Capi/js/jsscriptable.h%3E<br/>
#include "<t t="$sourcesinkdir"/><class data="name"/>EventSink.h"<br/>
<if text="#jsnoevent" match="true" not="1">
#include %3Capi/js/jseventlistener.h%3E<br/>
</if>
<br/>
<autoheader/><br/>
<br/>

const GUID JS_<class data="name"/>_GUID = <guid id="jsScriptable" format="c"/>;<br/>
<br/>

<!-- custom header codeblocks -->
<foreach objects="codeblocks" type="interface.header.h">
  <codeblock data="block"/>
  <br/>
</foreach>

<if text="#jsnoevent" match="true" not="1">
class <class data="classlayer"/>EventSink;<br/>
</if>

// ----------------------------------------------------------------------------<br/>
<br/>
class <class data="classlayer"/>
<ob/><br/>
<indent>

  <!--protected constructor & destructor -->

  protected:<br/>

  <indent>
    <class data="classlayer"/>();<br/>
    virtual ~<class data="classlayer"/>();<br/>
  </indent>  

  <!-- custom class codeblocks -->

  <resetscope/>
  <foreach objects="codeblocks" type="interface">
   <codeblock data="scope"/>
   <indent>
      <codeblock data="block"/>
      <br/>
   </indent>  
  </foreach>
  <br/>

  public:<br/>
  <indent>
    static JSClass <class data="classlayer"/>::classDescriptor;<br/>
    static JSFunctionSpec <class data="classlayer"/>::functionTable[];<br/>
    <br/>
  </indent>

  <!-- methods -->

  public:<br/>
  <indent>
    <call id="for_all_fromjs" proc="fromjs_declaration"/>
  </indent>
  <br/>
  <indent>
    <call id="for_all_tojs" proc="tojs_declaration"/>
  </indent>

  <if text="#jsnoevent" match="true" not="1">
    <br/>
    private:<br/>
    <indent>
      <class data="classlayer"/>EventSink *jsSink;<br/>
    </indent>
  </if>

</indent>
<cb/>;<br/>
<br/>

<if text="#jsnoevent" match="true" not="1">
  // ----------------------------------------------------------------------------<br/>
  <br/>
  class <class data="classlayer"/>EventSink : public <class data="name"/>EventSink
  <ob/><br/>
  <indent>
    public:<br/>
    <indent>
      <class data="classlayer"/>EventSink(<class data="classlayer"/>%20*jsclass) : m_jsClass(jsclass) {}<br/>
      virtual ~<class data="classlayer"/>EventSink() {}<br/>
      <call id="for_all_events" proc="eventsink_declaration"/>
    </indent>
    private:<br/>
    <indent>
      <class data="classlayer"/>%20*m_jsClass;<br/>
    </indent>
  </indent>
  <cb/>;<br/>
  <br/>
</if>

<!-- custom footer codeblocks -->
<foreach objects="codeblocks" type="interface.footer.h">
  <codeblock data="block"/>
  <br/>
</foreach>

#endif // <class data="classlayer" ucase="1"/>_H<br/>

</module>

<!-- Javascript Dispatcher - cpp file -->

<module id="cpp" filename="$jsdir.JS*.cpp">
// ----------------------------------------------------------------------------<br/>
// Generated by JSScriptable Factory - DO NOT EDIT<br/>
// <br/>
// File        : <moduledata data="filename"/><br/>
// Class       : <class data="name"/><br/>
// class layer : Javascript Dispatcher
// ----------------------------------------------------------------------------<br/>
<br/>
<stdafx/>
#include "JS<class data="name"/>.h"<br/>
#include "<class data="ImplementationHeader"/>"<br/>
<br/>

<autoheader include="1" unknown="%22classdecl.h%22"/><br/>

#pragma warning(push)<br/>
#pragma warning(disable: 4800)<br/>
<br/>

<!-- custom header codeblocks -->
<foreach objects="codeblocks" type="interface.header.cpp">
  <codeblock data="block"/>
  <br/>
</foreach>

<br/>

<class data="classlayer"/>::<class data="classlayer"/>()
<ob/><br/>
<indent>
  <class data="name"/>%20*pthis = (static_cast%3C<class data="name"/>%20*%3E(this));
  pthis-%3Ejs_addInterface(JS_<class data="name"/>_GUID, pthis);<br/>
  pthis-%3Ejs_addClassDescriptor(%26<class data="classlayer"/>::classDescriptor);<br/>
  pthis-%3Ejs_addFunctionTable(<class data="classlayer"/>::functionTable);<br/>
  <if text="#jsnoevent" match="true" not="1">
    jsSink = new <class data="classlayer"/>EventSink(this);<br/>
    jsSink->eventSink_registerTo(pthis);<br/>
  </if>
</indent>
<cb/><br/>
<br/>

<class data="classlayer"/>::~<class data="classlayer"/>()
<ob/><br/>
<indent>
  <if text="#jsnoevent" match="true" not="1">
    delete jsSink;<br/>
  </if>
</indent>
<cb/><br/>
<br/>

JSClass <class data="classlayer"/>::classDescriptor =
<ob/><br/>
<indent>
    "<class data="name"/>", JSCLASS_HAS_PRIVATE,<br/>
    JS_PropertyStub, JS_PropertyStub, JS_PropertyStub, JS_PropertyStub,<br/>
    JS_EnumerateStub, JS_ResolveStub, JS_ConvertStub, JS_FinalizeStub,<br/>
    JSCLASS_NO_OPTIONAL_MEMBERS<br/>
</indent>
<cb/>;<br/>
<br/>

JSFunctionSpec <class data="classlayer"/>::functionTable[] =
<ob/><br/>
<indent>
  <call id="for_all_fromjs" proc="fromjs_tableentry"/>
  {0,0,0,0,0},<br/>
</indent>
<cb/>;<br/>
<br/>

<call id="for_all_fromjs" proc="fromjs_body"/>

<if text="#jsnoevent" match="true" not="1">
  // ----------------------------------------------------------------------------<br/>
  <br/>
  <call id="for_all_events" proc="eventsink_body"/>
  <br/>
</if>


<!-- custom footer codeblocks -->
<foreach objects="codeblocks" type="interface.footer.cpp">
  <codeblock data="block"/>
  <br/>
</foreach>

</module>

<!-- ==================================================================================================================== -->

<typemap id="cpptojs_type">
 <map default="JSObject"/>
 <map from="bool" to="JSBool"/>
 <map from="boolean" to="JSBool"/>
 <map from="byte" to="jsint"/>
 <map from="char" to="jsint"/>
 <map from="unsigned byte" to="jsuint"/>
 <map from="unsigned char" to="jsuint"/>
 <map from="hyper" to="jsint"/>
 <map from="long" to="jsint"/>
 <map from="short" to="jsint"/>
 <map from="small" to="jsint"/>
 <map from="int" to="jsint"/>
 <map from="unsigned long" to="jsuint"/>
 <map from="unsigned short" to="jsuint"/>
 <map from="unsigned small" to="jsuint"/>
 <map from="unsigned int" to="jsint"/>
 <map from="float" to="jsdouble"/>
 <map from="double" to="jsdouble"/>
 <map from="const char *" to="JSString *"/>
</typemap>

<typemap id="cpptojs_convert">
 <map default="JS_ValueToObject"/>
 <map from="bool" to="JS_ValueToBoolean"/>
 <map from="boolean" to="JS_ValueToBoolean"/>
 <map from="byte" to="JS_ValueToInt16"/>
 <map from="char" to="JS_ValueToInt16"/>
 <map from="unsigned byte" to="JS_ValueToUInt16"/>
 <map from="unsigned char" to="JS_ValueToUInt16"/>
 <map from="hyper" to="JS_ValueToInt32"/>
 <map from="long" to="JS_ValueToInt32"/>
 <map from="short" to="JS_ValueToInt32"/>
 <map from="small" to="JS_ValueToInt32"/>
 <map from="int" to="JS_ValueToInt32"/>
 <map from="unsigned long" to="js_ValueToECMAUint32"/>
 <map from="unsigned short" to="JS_ValueToUInt16"/>
 <map from="unsigned small" to="JS_ValueToUInt16"/>
 <map from="unsigned int" to="js_ValueToECMAUint32"/>
 <map from="float" to="JS_ValueToNumber"/>
 <map from="double" to="JS_ValueToNumber"/>
</typemap>

<proc id="for_all_fromjs">  
  <set id="fromjs_count" value="0"/>
  <foreach objects="methods">
   <skip objects="methods" type="ctor|dtor|static|inline|event|isretired|private"/> 
   <skip objects="methods" type="script" not="1"/> 
   <call id="$proc"/>
  </foreach>
</proc>

<proc id="for_all_tojs">  
  <set id="tojs_count" value="0"/>
  <foreach objects="methods">
   <skip objects="methods" type="ctor|dtor|static|inline|isretired|private"/> 
   <skip objects="methods" type="script" not="1"/> 
   <skip objects="methods" type="event" not="1"/> 
   <call id="$proc"/>
  </foreach>
</proc>

<proc id="fromjs_declaration">
   static JSBool fromjs_<method data="name"/>
   (JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);<br/>
</proc>

<proc id="tojs_declaration">
  <method data="returntype"/>tojs_<method data="name"/>(
  <foreach objects="params">
    <forcomma/>
    <param data="type"/>
    <param data="name"/>
  </foreach>
  );<br/>
</proc>

<proc id="fromjs_tableentry">
  %7B"<method data="name"/>", <class data="classlayer"/>::fromjs_<method data="name"/>, <method data="numparams"/>, 0, 0%7D,<br/>
</proc>

<proc id="concat_param">
  <set id="cur"><get id="$var"/></set>
	<set id="comma"><if text="$cur" match="" not="1">,%20</if></set>
  <set id="newval">
	  <get id="$var"/>
    <get id="comma"/>
    <t t="$value"/>
  </set>
  <set id="$var" value="$newval"/>
</proc>

<proc id="extract_param">
  <set id="loopvarsdefined" value="0"/>
  // <param data="type"/><param data="name"/><br/>
  <set id="totype"><map type="$(param.type)" map="cpptojs_type" trim="1" basemapping="1"/></set>
  <if text="$totype" match="JSObject">
    <set id="varprefix" value="*"/>
    <else>
      <set id="varprefix" value=""/>
    </else>
  </if>
  <get id="totype"/>%20<get id="varprefix"/>p<param data="num"/>;<br/>
  <if text="$totype" match="JSString *">
    p<param data="num"/>%20= JS_ValueToString(cx, argv[<param data="num"/>]);<br/>
    argv[<param data="num"/>] = STRING_TO_JSVAL(p<param data="num"/>);<br/>
    const char *p<param data="num"/>b = JS_GetStringBytes(p<param data="num"/>);<br/>
    <call id="concat_param" var="param_list" value="p$(param.num)b"/>
    <else>
      if (!<map type="$(param.type)" map="cpptojs_convert" trim="1" basemapping="1"/>(cx, argv[<param data="num"/>], %26p<param data="num"/>))<br/>
      <indent>
        return JS_FALSE;<br/>
	    </indent>
	  </else>
  </if>
  <if text="$totype" match="jsint">
    argv[<param data="num"/>] = INT_TO_JSVAL(p<param data="num"/>);<br/>
    <call id="concat_param" var="param_list" value="p$(param.num)"/>
  </if>
  <if text="$totype" match="JSBool">
    argv[<param data="num"/>] = BOOLEAN_TO_JSVAL(p<param data="num"/>);<br/>
    <call id="concat_param" var="param_list" value="p$(param.num)"/>
  </if>
  <if text="$totype" match="jsdouble">
    argv[<param data="num"/>] = DOUBLE_TO_JSVAL(p<param data="num"/>);<br/>
    <call id="concat_param" var="param_list" value="p$(param.num)"/>
  </if>
  <if text="$totype" match="JSObject">
    <set id="handled" value="0"/>

    <if text="$(param.type)" match="PtrList %3C * %3E*">
      // convert js array to PtrList<br/>
      <!-- parameter is a PtrList of something, for now assume it is a PtrList of JSScriptable descendents -->
      <set id="temp"><param data="type" delsuffix="*|%26"/></set>
      <set id="templateparam"><t t="$temp" delprefix="PtrList %3C " delsuffix="%3E"/></set>
      <param data="type" delsuffix="%26|*"/> list<param data="num"/>;<br/>
      if (!JS_IsArrayObject(cx, p<param data="num"/>)) return JS_FALSE;<br/>
      <if text="$loopvarsdefined" equal="0">jsuint len;<br/></if>
      <if text="$loopvarsdefined" equal="0">jsint i;<br/></if>
      <set id="loopvarsdefined" value="1"/>
      if (!JS_GetArrayLength(cx, p<param data="num"/>, %26len)) return JS_FALSE;<br/>
      JSRootedVector jsVect<param data="num"/>(cx);<br/>
      for (i=0;i%3Clen;i++)
      <ob/><br/>
      <indent>
        jsval *pv = jsVect<param data="num"/>.newVal();<br/>
        if (!JS_GetElement(cx, p<param data="num"/>, i, pv)) return JS_FALSE;<br/>
        if (!JSVAL_IS_OBJECT(*pv)) return JS_FALSE;<br/>
        JSScriptable *o = reinterpret_cast%3CJSScriptable*%3E(JS_GetPrivate(cx, JSVAL_TO_OBJECT(*pv)));<br/>
        list<param data="num"/>.addItem(static_cast%3C<t t="$templateparam"/> *%3E(o));<br/>
      </indent>
      <cb/><br/>
      <set id="add"><if object="param" isoftype="pointer">%26</if></set>
      <call id="concat_param" var="param_list" value="$add.list$(param.num)"/>
      <set id="handled" value="1"/>
    </if>

    <if text="$handled" equal="0">
      <if object="param" isoftype="pointer" not="1">
        <warning text="passing object as reference or copy is not fully supported ($(method.name) - $(param.name))"/>
      </if>
      argv[<param data="num"/>] = OBJECT_TO_JSVAL(p<param data="num"/>);<br/>
      <set id="strip"><if object="param" isoftype="reference">%26</if></set>
      <set id="baseptype"><param data="type" delsuffix="$strip"/></set>
      <set id="add"><if object="param" isoftype="pointer" not="1">*</if></set>
      <get id="baseptype"/>
      <get id="add"/>
      p<param data="num"/>o = NULL;<br/>
      if (p<param data="num"/>)
      <ob/><br/>
      <indent>
        <if text="$baseptype" match="void *" not="1">
          JSScriptable *pobj = reinterpret_cast%3CJSScriptable*%3E(JS_GetPrivate(cx, p<param data="num"/>));<br/>
          if (!pobj)
          <ob/><br/>
          <indent>
            object-%3Ejs_throwNullParamException(<param data="num"/>, JS<class data="name"/>::functionTable[<get id="fromjs_count"/>].name, JS<class data="name"/>::classDescriptor.name);<br/>
            return JS_FALSE;<br/>
          </indent>
          <cb/><br/>
          p<param data="num"/>o = static_cast%3C<param data="type" delsuffix="$strip"/><get id="add"/>%3E(pobj-%3Ejs_getInterface(JS_<param data="type" delsuffix="%26|*" trim="1"/>_GUID));<br/>
          if (!p<param data="num"/>o)
          <ob/><br/>
          <indent>
            object-%3Ejs_throwParamTypeException(<param data="num"/>, JS<param data="type" delsuffix="%26|*" trim="1"/>::classDescriptor.name, JS<class data="name"/>::functionTable[<get id="fromjs_count"/>].name, JS<class data="name"/>::classDescriptor.name);<br/>
            return JS_FALSE;<br/>
          </indent>
          <cb/><br/>
          <else>
            p<param data="num"/>o = static_cast%3C<param data="type" delsuffix="$strip"/><get id="add"/>%3E(reinterpret_cast%3CJSScriptable*%3E(JS_GetPrivate(cx, p<param data="num"/>)));<br/>
          </else>
        </if>
      </indent>
      <cb/><br/>
      <call id="concat_param" var="param_list" value="$add.p$(param.num)o"/>
    </if>
  </if>
</proc>

<proc id="for_all_params">
  <foreach objects="params">
    <call id="$proc"/>
  </foreach>
</proc>

<proc id="fromjs_body">
  JSBool <class data="classlayer"/>::fromjs_<method data="name"/>
  (JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval)
  <ob/><br/>
  <indent>
    <set id="param_list" value=""/>
    // get instance<br/>
    <class data="name"/>%20*object = static_cast%3C<class data="name"/>%20*%3E(reinterpret_cast%3CJSScriptable *%3E(JS_GetPrivate(cx, obj)));<br/>
    if (!object)
    <ob/><br/>
    <indent>
      JSScriptable::js_throwNullCallException(JS<class data="name"/>::classDescriptor.name, JS<class data="name"/>::functionTable[<get id="fromjs_count"/>].name);<br/>
      return JS_FALSE;<br/>
    </indent>
    <cb/><br/>
    // record context<br/>
    object-%3Ejs_setCurrentContext(cx);<br/>
    <call id="for_all_params" proc="extract_param"/>
    // call method<br/>
    ASSERT(object != NULL);<br/>
    <set id="returntype" value="$(method.returntype)"/>
    <if object="methods" isoftype="void" not="1">
      <if text="$returntype" match="*\*" not="1"> <!-- is it returning an object or reference instead of a pointer to an object -->
        <method data="returntype" delsuffix="%26"/>
        <else>
          <if text="$returntype" match="void *">
            JSScriptable *
            <else>
              <method data="returntype"/>%20
            </else>
          </if>
        </else>
      </if>
      rv = 
    </if>
    <if text="$returntype" match="void *">reinterpret_cast%3CJSScriptable *%3E(</if>
    object-%3E<method data="name"/>(<get id="param_list"/>)
    <if text="$returntype" match="void *">)</if>
    ;<br/>
    <set id="fromtype"><map type="$(method.returntype)" map="cpptojs_type" trim="1" basemapping="1"/></set>
    <if object="methods" isoftype="void" not="1">
      // handle return value<br/>
      <if text="$fromtype" match="jsint">
        *rval = INT_TO_JSVAL(rv);<br/>
      </if>
      <if text="$fromtype" match="JSBool">
        *rval = BOOLEAN_TO_JSVAL(rv);<br/>
      </if>
      <if text="$fromtype" match="JSObject">
        <set id="handled" value="0"/>
        
        <!-- is this returning a PtrList of something -->
        <if text="$returntype" match="PtrList %3C * %3E*">
          <!-- todo: extract the template argument using regexps, and handle more PtrList types (ie, PtrList of const char *) -->
          <!-- for now, only handle PtrList of JSScriptable descendents -->
          // convert PtrList to js array<br/>
          <set id="accessor"><if text="$returntype" match="*\*">-%3E<else>.</else></if></set>
          JSObject *array = JS_NewArrayObject(cx, 0, NULL);<br/>
          *rval = OBJECT_TO_JSVAL(array);<br/>
          <if text="$returntype" match="*\*">
            if (!rv) return JS_TRUE; // success, empty array<br/>
          </if>
          jsval vp;<br/>
          for (int j=0;j%3Crv<t t="$accessor"/>getNumItems();j++)
          <ob/><br/>
          <indent>
            JSScriptable *e = rv<t t="$accessor"/>enumItem(j);<br/>
            vp = OBJECT_TO_JSVAL(e->js_getJSObject(cx));<br/>
            JS_SetElement(cx, array, j, %26vp);<br/>
          </indent>
          <cb/><br/>
          <set id="handled" value="1"/>
        </if>

        <!-- otherwise, assume that this is an object or a pointer to an object that is a valid JSScriptable -->
        <if text="$handled" equal="0">
          <if text="$returntype" match="*\*" not="1"> <!-- is it returning an object or reference instead of a pointer to an object -->
            <warning text="returning an object or a reference is not fully supported ($(method.name)), return a pointer instead"/>
            *rval = OBJECT_TO_JSVAL(rv.js_getJSObject(cx));<br/>
            <else>
              if (!rv) *rval = JSVAL_VOID;<br/>
              else *rval = OBJECT_TO_JSVAL(rv-%3Ejs_getJSObject(cx));<br/>
            </else>
          </if>
        </if>
      </if>
      <if text="$fromtype" match="jsdouble">
        if (!JS_NewNumberValue(cx, rv, rval))<br/>
        <indent>
          return JS_FALSE;
        </indent>
      </if>
      <if text="$fromtype" match="JSString *">
        JSString *str = JS_NewStringCopyZ(cx, rv);<br/>
        *rval = STRING_TO_JSVAL(str);<br/>
      </if>
    </if>
    // success<br/>
    return JS_TRUE;<br/>
  </indent>
  <cb/><br/>
  <br/>
  <inc id="fromjs_count"/>
</proc>

<proc id="for_all_events">  
  <foreach objects="methods">
   <skip objects="methods" type="ctor|dtor|static|inline|isretired|private"/> 
   <skip objects="methods" type="event" not="1"/> 
   <call id="$proc"/>
  </foreach>
</proc>

<proc id="eventsink_declaration">
  virtual void eventSink_<method data="name"/>(
  <class data="name"/>EventSource *source
  <foreach objects="params">
    ,%20
    <param data="type"/>
    <param data="name"/>
  </foreach>
  );<br/>
</proc>

<proc id="eventsink_body">
  void <class data="classlayer"/>EventSink::eventSink_<method data="name"/>(
  <class data="name"/>EventSource *source
  <foreach objects="params">
    ,%20
    <param data="type"/>
    <param data="name"/>
  </foreach>
  )
  <ob/><br/>
    <indent>
      PtrList%3CJSEventListener%3E *listeners = (static_cast%3C<class data="name"/>%20*%3E(m_jsClass))-%3Ejs_getEventListeners("<method data="name" lcase="1"/>");<br/>
      if (!listeners) return;<br/>
      jsval rv;<br/>
      foreach(*listeners)<br/>
      <indent>
        JSEventListener *listener = (*listeners).getfor();<br/>
        <if text="$(method.numparams)" match="0" not="1">
          jsval p[<method data="numparams"/>];<br/>
        </if>
        <foreach objects="params">
          <set id="fromtype"><map type="$(param.type)" map="cpptojs_type" trim="1" basemapping="1"/></set>
          <if text="$fromtype" match="JSString *">
            JSString *str<param data="num"/> = JS_NewStringCopyZ((static_cast%3C<class data="name"/>%20*%3E(m_jsClass))-%3Ejs_getCurrentContext(), <param data="name"/>);<br/>
            p[<param data="num"/>] = STRING_TO_JSVAL(str<param data="num"/>);<br/>
            <else>
              <if text="$fromtype" match="JSObject" not="1">
                <get id="fromtype"/>%20p<param data="num"/>%20= (<get id="fromtype"/>)<param data="name"/>;<br/>
              </if>
              <if text="$fromtype" match="jsint">
                p[<param data="num"/>] = INT_TO_JSVAL(p<param data="num"/>);<br/>
              </if>
              <if text="$fromtype" match="JSBool">
                p[<param data="num"/>] = BOOLEAN_TO_JSVAL(p<param data="num"/>);<br/>
              </if>
              <if text="$fromtype" match="JSObject">
                if (!<param data="name"/>) p[<param data="num"/>] = NULL;<br/>
                else p[<param data="num"/>] = OBJECT_TO_JSVAL(<param data="name"/>-%3Ejs_getJSObject((static_cast%3C<class data="name"/>%20*%3E(m_jsClass))-%3Ejs_getCurrentContext()));<br/>
              </if>
              <if text="$fromtype" match="jsdouble">
                JS_NewNumberValue(cx, p<param data="num"/>, %26p[<param data="num"/>]);<br/>
              </if>
            </else>
          </if>
        </foreach>
        <if text="$(method.numparams)" match="0">
          <set id="params" value="NULL"/>
          <else>
            <set id="params" value="p"/>
          </else>
        </if>
        JS_CallFunctionValue(listener-%3Em_context, listener-%3Em_object, listener-%3Em_function, <method data="numparams"/>, <get id="params"/>, %26rv);<br/>
      </indent>
      endfor<br/>
    </indent>
  <cb/><br/>
  <br/>
</proc>

</XPP:StandaloneTemplate>

