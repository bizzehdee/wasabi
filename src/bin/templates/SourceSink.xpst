<XPP:StandaloneTemplate classname="*EventSource" inherit="parallel" desc="SourceSink" >

<!-- Event Source - header file -->

<module id="h" filename="$sourcesinkdir.*EventSource.h">

// ----------------------------------------------------------------------------<br/>
// Generated by SourceSink Factory - DO NOT EDIT<br/>
// <br/>
// File        : <moduledata data="filename"/><br/>
// Class       : <class data="name"/><br/>
// class layer : Event Source for <class data="name"/><br/>
// ----------------------------------------------------------------------------<br/>
<br/>

<!-- compiler safeguards -->

#ifndef <class data="classlayer" ucase="1"/>_H<br/>
#define <class data="classlayer" ucase="1"/>_H<br/>

<br/>
#include %3Cbfc/eventsource.h%3E<br/>
<br/>
<autoheader/><br/>
class <class data="name"/>EventSink;<br/>
<br/>

<!-- custom header codeblocks -->
<foreach objects="codeblocks" type="interface.header.h">
  <codeblock data="block"/>
  <br/>
</foreach>

<!-- class declaration -->

// ----------------------------------------------------------------------------<br/>
<br/>
class <class data="classlayer"/>
<ob/><br/>
<indent>

  <!-- protected constructor & destructor -->

  protected:<br/>

  <indent>
    <class data="classlayer"/>() {}<br/>
    virtual ~<class data="classlayer"/>() {}<br/>
  </indent>  

  <!-- custom class codeblocks -->

  <resetscope/>
  <foreach objects="codeblocks" type="interface">
   <codeblock data="scope"/>
   <indent>
      <codeblock data="block"/>
      <br/>
   </indent>  
  </foreach>
  <br/>

  public:<br/>
  <indent>
    <call id="for_all_events" proc="eventsource_declaration"/>
    <br/>
    void register<class data="name" uclead="1"/>EventSink(<class data="name"/>EventSink *sink) { m_sinks.addItem(sink); }<br/>
    void unregister<class data="name" uclead="1"/>EventSink(<class data="name"/>EventSink *sink) { m_sinks.removeItem(sink); }<br/>
  </indent>
  
  <br/>
  private:<br/>
  <indent>
    PtrList%3C<class data="name"/>EventSink%3E m_sinks;<br/>
  </indent>
</indent>
<cb/>;<br/>
<br/>

<!-- custom footer codeblocks -->
<foreach objects="codeblocks" type="interface.footer.h">
  <codeblock data="block"/>
  <br/>
</foreach>

#endif // <class data="classlayer" ucase="1"/>_H<br/>

</module>

<!-- Javascript Dispatcher - cpp file -->

<module id="cpp" filename="$sourcesinkdir.*EventSource.cpp">
// ----------------------------------------------------------------------------<br/>
// Generated by SourceSink Factory - DO NOT EDIT<br/>
// <br/>
// File        : <moduledata data="filename"/><br/>
// Class       : <class data="name"/><br/>
// class layer : Event Source for for <class data="name"/><br/>
// ----------------------------------------------------------------------------<br/>
<br/>
<stdafx/>
#include "<class data="name"/>EventSource.h"<br/>
#include "<class data="name"/>EventSink.h"<br/>
#include "<class data="ImplementationHeader"/>"<br/>
<br/>

<!-- custom header codeblocks -->
<foreach objects="codeblocks" type="interface.header.cpp">
  <codeblock data="block"/>
  <br/>
</foreach>

<br/>

<call id="for_all_events" proc="eventsource_body"/>


<!-- custom footer codeblocks -->
<foreach objects="codeblocks" type="interface.footer.cpp">
  <codeblock data="block"/>
  <br/>
</foreach>

</module>


<module id="h2" filename="$sourcesinkdir.*EventSink.h">
// ----------------------------------------------------------------------------<br/>
// Generated by SourceSink Factory - DO NOT EDIT<br/>
// <br/>
// File        : <moduledata data="filename"/><br/>
// Class       : <class data="name"/><br/>
// class layer : Event Sink for <class data="name"/><br/>
// ----------------------------------------------------------------------------<br/>
<br/>

<!-- compiler safeguards -->

#ifndef <class data="name" ucase="1"/>EVENTSINK_H<br/>
#define <class data="name" ucase="1"/>EVENTSINK_H<br/>
<br/>
#include %3Cbfc/eventsink.h%3E<br/>
#include "<class data="name"/>EventSource.h"<br/>
<br/>
<autoheader/><br/>
<br/>

// ----------------------------------------------------------------------------<br/>
<br/>
class <class data="name"/>EventSink
<ob/><br/>
<indent>

  <!-- protected constructor & destructor -->

  protected:<br/>

  <indent>
    <class data="name"/>EventSink() {}<br/>
    virtual ~<class data="name"/>EventSink()
    <ob/><br/>
    <indent>
      while (m_sources.getNumItems()>0)
      <ob/><br/>
      <indent>
        eventSink_unregisterTo(m_sources.enumItem(0));<br/>
      </indent>
      <cb/><br/>
    </indent>
    <cb/><br/>
  </indent>  
  <br/>
  public:<br/>
  <indent>
    void eventSink_registerTo(<class data="name"/>EventSource *eventSource)
    <ob/><br/>
    <indent>
      eventSource-%3Eregister<class data="name" uclead="1"/>EventSink(this);<br/>
      m_sources.addItem(eventSource);<br/>
    </indent>
    <cb/><br/>
    void eventSink_unregisterTo(<class data="name"/>EventSource *eventSource)
    <ob/><br/>
    <indent>
      eventSource-%3Eunregister<class data="name" uclead="1"/>EventSink(this);<br/>
      m_sources.removeItem(eventSource);<br/>
    </indent>
    <cb/><br/>
    <call id="for_all_events" proc="eventsink_declaration"/>
  </indent>
  <br/>
  private:<br/>
  <indent>
    PtrList%3C<class data="name"/>EventSource%3E m_sources;<br/>
  </indent>

</indent>
<cb/>;<br/>
<br/>

#endif // <class data="name" ucase="1"/>EVENTSINK_H<br/>

</module>

<!-- ==================================================================================================================== -->

<proc id="for_all_events">  
  <foreach objects="methods">
   <skip objects="methods" type="ctor|dtor|static|inline|isretired|private"/> 
   <skip objects="methods" type="event" not="1"/> 
   <call id="$proc"/>
  </foreach>
</proc>

<proc id="eventsource_declaration">
  <method data="returntype"/>eventSource_<method data="name"/>(
  <foreach objects="params">
    <forcomma/>
    <param data="type"/>
    <param data="name"/>
  </foreach>
  );<br/>
</proc>

<proc id="eventsource_body">
  <method data="returntype"/> <class data="classlayer"/>::eventSource_<method data="name"/>(
  <foreach objects="params">
    <forcomma/>
    <param data="type"/>
    <param data="name"/>
  </foreach>
  )
  <ob/><br/>
  <indent>
    foreach(m_sinks)<br/>
    <indent>
      m_sinks.getfor()-%3EeventSink_<method data="name"/>(this
      <foreach objects="params">
        ,%20
        <param data="name"/>
      </foreach>
      );<br/>
    </indent>
    endfor<br/>
  </indent>
  <cb/><br/>
  <br/>
</proc>

<proc id="eventsink_declaration">
  virtual void eventSink_<method data="name"/>(
  <class data="name"/>EventSource *source
  <foreach objects="params">
    ,%20
    <param data="type"/>
    <param data="name"/>
  </foreach>
  ) {} <br/>
</proc>

</XPP:StandaloneTemplate>

